@page "/products/{productId}/edit"
@inject NavigationManager NavigationManager
@inject IProductsClient ProductsClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Product</PageTitle>

@if (product is null)
{
    <span>Loading...</span>
}
else
{
    <PageTitle>@product.Name (@product.Sku)</PageTitle>

    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-12">@product.Name</MudText>

    <MudButton StartIcon="@Icons.Material.Filled.Link" Color="Color.Primary" Link="@($"/products/{product.Id}")">View
        product</MudButton>

    <MudGrid Spacing="6">
        <MudItem xs="12" sm="12" md="6" lg="6">
            <div class="card shadow-sm">
                @if (product.Image is not null)
                {
                    <MudImage Src="@product.Image" Alt="Mony the dog" Fluid="true" Elevation="25" Class="rounded-lg"
                Style="width: 100%;" />
                }
                else
                {
                    <svg class="rounded-lg" width="100%" height="225" xmlns="http://www.w3.org/2000/svg" role="img"
                aria-label="Placeholder: Thumbnail" preserveAspectRatio="xMidYMid slice" focusable="false">
                        <title>Placeholder</title>
                        <rect width="100%" height="100%" fill="#55595c"></rect><text x="50%" y="50%" fill="#eceeef"
                    dy=".3em">Thumbnail</text>
                    </svg>
                }
            </div>

            <InputFile id="fileInput" OnChange="UploadFiles" hidden accept="*.jpg, *.jpeg, *.png" />

            <MudButton HtmlTag="label" Color="Color.Secondary" StartIcon="@Icons.Filled.CloudUpload" for="fileInput">
                Upload image
            </MudButton>

        </MudItem>

        <MudItem xs="12" sm="12" md="6" lg="6">

            <MudCard class="mb-4" Elevation="25">
                <MudCardHeader>
                    <MudText Typo="Typo.h5" Align="Align.Center">Details</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <dl>
                        @if (!string.IsNullOrEmpty(product.Description))
                        {
                            <dt>Description</dt>
                            <dd>@product.Description</dd>
                        }

                        @if (product.Group is not null)
                        {
                            <dt>Group</dt>
                            <dd>@product.Group.Name</dd>
                        }

                        @if (!string.IsNullOrEmpty(product.Sku))
                        {
                            <dt>SKU</dt>
                            <dd>@product.Sku</dd>
                        }

                        @if (product.Price is not null)
                        {
                            <dt>Price</dt>
                            <dd>@product.Price?.ToString("c")</dd>
                        }
                    </dl>

                    <MudButton StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="EditDetails"
                    Class="my-2">Edit details</MudButton>

                </MudCardContent>
            </MudCard>

            <MudPaper Elevation="25" Class="pa-4 mt-2">
                <MudSelect T="ProductVisibility?" Label="Visibility" Variant="Variant.Outlined" Value="@product.Visibility"
                ValueChanged="async (e) => await UpdateVisibility((ProductVisibility?)e)"
                ToStringFunc="x => x?.ToString()">
                    @foreach (var item in VisibilityOptions)
                    {
                        <MudSelectItem Value="@item" />
                    }
                </MudSelect>
            </MudPaper>

        </MudItem>

    </MudGrid>

    <MudText Typo="Typo.h4" Align="Align.Center" Class="mt-6 mb-2">Attributes</MudText>

    <div class="mb-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateAttribute"
        StartIcon="@Icons.Material.Filled.Add">Create attribute</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Link="@($"/products/{product.Id}/attributes/groups")">
            Attribute groups</MudButton>
    </div>

    if (attributes is not null)
    {
        @foreach (var group in attributes
       .ToList()
       .GroupBy(x => x.Group?.Name))
        {
            @if (group.Key is not null)
            {
                <MudText Typo="Typo.h5" Align="Align.Left" Class="mb-2 mt-6">@group.Key</MudText>
            }

            <MudTable T="AttributeDto" Items="@group" Dense="true" Hover="true" @ref="table2" Class="mb-4" Elevation="25">

                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>For Variant</MudTh>
                    <MudTh>Is main attribute</MudTh>
                    <MudTh>Values</MudTh>
                    @* <MudTh>Default value</MudTh> *@
                    <MudTh></MudTh>
                </HeaderContent>

                <RowTemplate Context="attribute">
                    <MudTd DataLabel="Name">@(attribute.Name)</MudTd>
                    <MudTd DataLabel="For Variant">@(attribute.ForVariant)</MudTd>
                    <MudTd DataLabel="Is main attribute">@(attribute.IsMainAttribute)</MudTd>
                    <MudTd DataLabel="Values">@string.Join(", ", attribute.Values.Select(x => x.Name))</MudTd>
                    @* <MudTd DataLabel="Default value">@attribute.DefaultValue?.Name</MudTd> *@
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await UpdateAttribute(attribute)" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                OnClick="async () => await DeleteAttribute(attribute)" />
                    </MudTd>
                </RowTemplate>

                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>

                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>

            </MudTable>
        }
    }

    @if (product.HasVariants)
    {
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mt-6 mb-2">Variants</MudText>

        @if (!attributes.Any())
        {
            <span>Add attributes before you can create variants</span>
        }
        else
        {
            <div class="mb-4">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateVariant"
        StartIcon="@Icons.Material.Filled.Add">Create variant</MudButton>
</div>

            <MudTable T="ProductVariantDto" @ref="table3" ServerData="ServerReload" Dense="true" Hover="true" Class="mb-4"
    Elevation="25">

                <HeaderContent>
                    <MudTh>Image</MudTh>
                    <MudTh>
                        <MudTableSortLabel SortLabel="Name" T="ProductVariantDto">Name</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortLabel="Sku" T="ProductVariantDto">SKU</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortLabel="Price" T="ProductVariantDto">Price</MudTableSortLabel>
                    </MudTh>

                    @if (GetTableData()?.Items is IEnumerable<ProductVariantDto> variants && variants.Any())
                    {
                        @foreach (var option in GetTableData().Items.First().Attributes)
                        {
                            <MudTh>
                                <MudTableSortLabel SortLabel="Values.Value" T="ProductVariantDto">@option.Name</MudTableSortLabel>
                            </MudTh>
                        }
                    }

                    <MudTh></MudTh>
                </HeaderContent>

                <RowTemplate Context="variant">
                    <MudTd DataLabel="Image">
                        @if (variant.Image is not null)
                        {
                            <MudImage Src="@variant.Image" Alt="Mony the dog" Elevation="0" Height="100" Class="rounded-lg" />
                        }
                    </MudTd>
                    <MudTd DataLabel="Name">@variant.Name</MudTd>
                    <MudTd DataLabel="SKU">@variant.Sku</MudTd>
                    <MudTd DataLabel="Price">@variant.Price?.ToString("c")</MudTd>

                    @if (variant.Attributes is not null)
                    {
                        foreach (var option in variant.Attributes)
                        {
                            <MudTd DataLabel="Name">@option.Value</MudTd>
                        }
                    }

                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await UpdateVariant(variant)" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteVariant(variant)" />
                    </MudTd>

                </RowTemplate>

                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>

                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>

                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>

        }
    }

    <MudText Typo="Typo.h4" Align="Align.Center" Class="mt-6 mb-2">Options</MudText>

    <div class="mb-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateOption"
        StartIcon="@Icons.Material.Filled.Add">Create option</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Link="@($"/products/{product.Id}/options/groups")">
            Option groups</MudButton>
    </div>

    if (options is not null)
    {
        @foreach (var group in options
       .ToList()
       .GroupBy(x => x.Group?.Name))
        {
            @if (group.Key is not null)
            {
                <MudText Typo="Typo.h5" Align="Align.Left" Class="mb-2 mt-6">@group.Key</MudText>
            }

            <MudTable T="OptionDto" Items="@group" Dense="true" Hover="true" @ref="table" Class="mb-4" Elevation="25">

                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>SKU</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh>Values</MudTh>
                    <MudTh>Default value</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>

                <RowTemplate Context="option">
                    <MudTd DataLabel="Name">@option.Name</MudTd>
                    <MudTd DataLabel="Type">@option.OptionType</MudTd>
                    <MudTd DataLabel="SKU">@option.Sku</MudTd>
                    <MudTd DataLabel="Price">@option.Price?.ToString("c")</MudTd>
                    <MudTd DataLabel="Values">@string.Join(", ", option.Values.Select(x => x.Name))</MudTd>
                    <MudTd DataLabel="Default value">@option.DefaultValue?.Name</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await UpdateOption(option)" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteOption(option)" />
                    </MudTd>
                </RowTemplate>

                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>

                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>

            </MudTable>
        }
    }
}

@code
{
    MudTable<OptionDto> table;
    MudTable<AttributeDto> table2;
    MudTable<ProductVariantDto> table3;

    ProductDto? product;
    List<AttributeDto>? attributes;
    List<OptionDto>? options;

    public IList<ProductVisibility?> VisibilityOptions { get; } = Enum.GetValues<ProductVisibility>().Select(x =>
    (ProductVisibility?)x).ToArray();

    [Parameter]
    public string? ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        product = await ProductsClient.GetProductAsync(ProductId);
        attributes = (await ProductsClient.GetProductAttributesAsync(ProductId)).ToList();
        options = (await ProductsClient.GetProductOptionsAsync(ProductId, null)).ToList();
    }

    private async Task<TableData<ProductVariantDto>> ServerReload(TableState state)
    {
        var result = await ProductsClient.GetVariantsAsync(ProductId, state.Page, state.PageSize, null, state.SortLabel,
        state.SortDirection == MudBlazor.SortDirection.Ascending ? Catalog.Client.SortDirection.Asc :
        Catalog.Client.SortDirection.Desc);

        return new TableData<ProductVariantDto>() { TotalItems = result.TotalItems, Items = result.Items };
    }

    async Task UpdateVisibility(ProductVisibility? value)
    {
        try
        {
            await ProductsClient.UpdateProductVisibilityAsync(ProductId, value.GetValueOrDefault());

            product.Visibility = value;

            Snackbar.Add($"The product \"{product.Name}\" is now {product.Visibility.ToString().ToLower()}.", Severity.Success);
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message, Severity.Error);
        }
    }

    async Task CreateOption()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(CreateProductOptionModal.ProductId), ProductId);
        parameters.Add(nameof(CreateProductOptionModal.Product), product);

        var modalRef = DialogService.Show<CreateProductOptionModal>("New Option", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        options.Add((OptionDto)result.Data);
    }

    async Task UpdateOption(OptionDto option)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(UpdateProductOptionModal.ProductId), ProductId);
        parameters.Add(nameof(UpdateProductOptionModal.Option), option);
        parameters.Add(nameof(UpdateProductOptionModal.Product), product);

        var modalRef = DialogService.Show<UpdateProductOptionModal>("Update Option", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        var index = options!.IndexOf(option);

        options[index] = (OptionDto)result.Data;
    }

    async Task DeleteOption(OptionDto option)
    {
        var modalResult = await DialogService.ShowMessageBox("Delete the option?", "This cannot be undone.", yesText: "Delete",
        noText: "No");
        if (!modalResult.GetValueOrDefault())
        {
            return;
        }

        await ProductsClient.DeleteProductOptionAsync(ProductId, option.Id);

        options.Remove(option);
    }

    async Task CreateVariant()
    {
        NavigationManager.NavigateTo($"/products/{ProductId}/variants/new");
    }

    async Task UpdateVariant(ProductVariantDto variant)
    {
        NavigationManager.NavigateTo($"/products/{ProductId}/variants/{variant.Id}/edit");
    }

    async Task DeleteVariant(ProductVariantDto variant)
    {
        var modalResult = await DialogService.ShowMessageBox("Delete the variant?", "This cannot be undone.", yesText: "Delete",
        noText: "No");
        if (!modalResult.GetValueOrDefault())
        {
            return;
        }

        await ProductsClient.DeleteVariantAsync(ProductId, variant.Id);

        //variants.Remove(variant);

        await table3.ReloadServerData();
    }

    async Task EditDetails()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(UpdateProductDetailsModal.ProductId), ProductId);
        parameters.Add(nameof(UpdateProductDetailsModal.Product), product);

        var modalRef = DialogService.Show<UpdateProductDetailsModal>("Update Details", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        product = await ProductsClient.GetProductAsync(ProductId);

        /*
        product.Name = data.Name;
        product.Description = data.Description;
        product.Sku = data.Sku;
        product.Price = data.Price;
        product.Group = data.GroupId;
        */

        //NavigationManager.NavigateTo($"/products/{product.Id}/edit", true);
    }

    private async void UploadFiles(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().First();
        product.Image = await ProductsClient.UploadProductImageAsync(product.Id, new FileParameter(file.OpenReadStream(3 *
        1000000), file.Name));

        StateHasChanged();
    }

    class ProductVariantVm
    {
        public string? Id { get; set; }

        public string Name { get; set; }

        public string SKU { get; set; }

        public OptionValueDto? SelectedValue { get; set; }

        public IEnumerable<OptionValueDto> Values { get; set; } = null!;
    }

    async Task CreateAttribute()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(CreateProductAttributeModal.ProductId), ProductId);
        parameters.Add(nameof(CreateProductAttributeModal.Product), product);

        var modalRef = DialogService.Show<CreateProductAttributeModal>("New Attribute", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        attributes.Add((AttributeDto)result.Data);
    }

    async Task UpdateAttribute(AttributeDto attribute)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(UpdateProductAttributeModal.ProductId), ProductId);
        parameters.Add(nameof(UpdateProductAttributeModal.Attribute), attribute);
        parameters.Add(nameof(UpdateProductAttributeModal.Product), product);

        var modalRef = DialogService.Show<UpdateProductAttributeModal>("Update Attribute", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        var index = attributes!.IndexOf(attribute);

        attributes[index] = (AttributeDto)result.Data;
    }

    async Task DeleteAttribute(AttributeDto attribute)
    {
        var modalResult = await DialogService.ShowMessageBox("Delete the attribute?", "This cannot be undone.", yesText:
        "Delete", noText: "No");
        if (!modalResult.GetValueOrDefault())
        {
            return;
        }

        await ProductsClient.DeleteProductAttributeAsync(ProductId, attribute.Id);

        attributes.Remove(attribute);
    }

    private TableData<ProductVariantDto>? GetTableData()
    {
        if (table3 is null) return null;

        return (TableData<ProductVariantDto>?)table3?.GetType()?
        .GetField("_server_data", System.Reflection.BindingFlags.NonPublic |
        System.Reflection.BindingFlags.Instance)?
        .GetValue(table3);
    }
}
