@using System.ComponentModel.DataAnnotations
@inject IProductsClient ProductsClient
@inject ISnackbar Snackbar

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <ObjectGraphDataAnnotationsValidator />

    <MudDialog>
        <DialogContent>

            <MudTextField Label="Name" Class="mb-6" Variant="MudBlazor.Variant.Outlined" @bind-Value="Name"
                For="() => Name" />

            <MudTextField Lines="3" Class="mb-6" Label="Description" Variant="MudBlazor.Variant.Outlined"
                @bind-Value="Description" For="() => Description" />

            <MudTextField Label="SKU" Class="mb-6" Variant="MudBlazor.Variant.Outlined" @bind-Value="SKU"
                For="() => SKU" />

            <MudNumericField Label="Price" Class="mb-6" Variant="MudBlazor.Variant.Outlined" @bind-Value="Price"
                For="() => Price" />

            <InputFile id="fileInput" OnChange="UploadFiles" hidden accept="*.jpg, *.jpeg, *.png" />

            <div class="mb-4">
                <MudButton HtmlTag="label" Color="Color.Secondary" StartIcon="@Icons.Filled.CloudUpload"
                    for="fileInput">
                    Upload image
                </MudButton>

                <MudText Typo="Typo.body1">@file?.Name</MudText>
            </div>

            <div class="form-group">
                @if (Attributes is not null)
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Attribute</th>
                                <th>Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Attributes is not null)
                            {
                                @foreach (var attribute in Attributes.Where(x => x.ForVariant))
                                {
                                    <tr>
                                        <td>@(attribute.Name)</td>

                                        @if (attribute.Values is not null)
                                        {
                                            <td>
                                                <MudSelect T="AttributeValueDto" Class="mb-6" Variant="MudBlazor.Variant.Outlined"
                                    @bind-Value="attribute.SelectedValue" ToStringFunc="x => x?.Name"
                                    For="() => attribute.SelectedValue">
                                                    @foreach (var item in attribute.Values)
                                                    {
                                                        <MudSelectItem Value="@item" />
                                                    }
                                                </MudSelect>
                                            </td>
                                        }
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                }
            </div>

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="() => Modal.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Save</MudButton>
        </DialogActions>
    </MudDialog>

</EditForm>

@code {
    [CascadingParameter] MudDialogInstance Modal { get; set; }

    [Parameter] public string ProductId { get; set; }

    [Parameter] public ProductVariantDto Variant { get; set; }

    [Required]
    public string Name { get; set; }

    public string Description { get; set; }

    [Required]
    public string SKU { get; set; }

    [Required]
    public decimal Price { get; set; }

    public List<AttributeVM> Attributes = new List<AttributeVM>();

    protected override async Task OnInitializedAsync()
    {
        Name = Variant.Name;
        Description = Variant.Description;
        SKU = Variant.Sku;
        Price = Variant.Price.GetValueOrDefault();

        var attributes = await ProductsClient.GetProductAttributesAsync(ProductId);
        foreach (var attribute in attributes.Where(x => x.ForVariant))
        {
            var vm = new AttributeVM()
            {
                Id = attribute.Id,
                Name = attribute.Name,
                ForVariant = attribute.ForVariant
            };

            Attributes.Add(vm);

            vm.Values.AddRange(
            await ProductsClient.GetProductAttributeValuesAsync(ProductId, attribute.Id));

            var o = Variant.Attributes.FirstOrDefault(x => x.Name == attribute.Name);

            vm.SelectedValue = vm.Values.FirstOrDefault(x => x.Name == o?.Value);

            if (vm.SelectedValue is null)
            {
                vm.SelectedValue = vm.Values.FirstOrDefault();
            }
        }
    }

    IBrowserFile? file;

    private void UploadFiles(InputFileChangeEventArgs e)
    {
        file = e.GetMultipleFiles().First();
    }

    async Task OnSubmit()
    {
        var data = new ApiUpdateProductVariant
        {
            Name = Name,
            Description = Description,
            Sku = SKU,
            Price = Price,
            Attributes = new List<ApiUpdateProductVariantAttribute>()
        };

        foreach (var attribute in Attributes)
        {
            var attributeData = new ApiUpdateProductVariantAttribute
            {
                //Id = attribute.Id,
                AttributeId = attribute.Id,
                ValueId = attribute.SelectedValue?.Id,
            };

            data.Attributes.Add(attributeData);
        }

        try
        {
            var result = await ProductsClient.UpdateVariantAsync(ProductId, Variant.Id, data);

            if (file is not null)
            {
                result.Image = await ProductsClient.UploadVariantImageAsync(ProductId, result.Id, new
                FileParameter(file.OpenReadStream(3 * 1000000), file.Name));
            }

            Modal.Close(DialogResult.Ok(result));
        }
        catch (ApiException<ProblemDetails> exc)
        {
            Snackbar.Add(exc.Result.Detail, Severity.Error);
        }
    }

    public class AttributeVM
    {
        public string Id { get; set; }

        public string Name { get; set; }

        public AttributeValueDto SelectedValue { get; set; }

        public bool ForVariant { get; set; }

        public List<AttributeValueDto> Values { get; set; } = new List<AttributeValueDto>();
    }
}
