@page "/products"
@inject IProductsClient ProductsClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Products</PageTitle>

<section>
    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-12">Products</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateProduct" StartIcon="@Icons.Material.Filled.Add" Class="my-2">Create product</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Link="/products/list">View all products</MudButton>
</section>

<div class="py-5">
        <div class="mb-4">
            <MudChipSet SelectedChip="chip" SelectedChipChanged="async (MudChip e) => await SetGroup(e)">
                @if (productGroups is not null)
                {
                    <MudChip Color="Color.Primary" Text="All"></MudChip>

                    foreach (var pg in productGroups)
                    {
                        <MudChip Color="Color.Secondary" Text="@pg.Name"></MudChip>
                    }
                }
            </MudChipSet>
        </div>

        @if (products is null)
        {
            <YourBrand.Portal.LoadingIndicator />
        }
        else
        {
            <MudGrid Spacing="6" Class="mb-4">
                @foreach (var product in products)
                {
                    <MudItem xs="12" sm="6" md="4" lg="4">
                        <a href="/products/@product.Id">
                            <MudCard Elevation="25">
                                <MudCardMedia Image="@product.Image" Height="200" />

                                <MudCardContent>
                                    <MudText Typo="Typo.h5">@product.Name</MudText>
                                    <MudText Typo="Typo.body2">@product.Description</MudText>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudText Typo="Typo.body2">@product.Price?.ToString("c")</MudText>
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="@($"/products/{product.Id}")">Learn More</MudButton>
                                </MudCardActions>
                            </MudCard>
                        </a> 
                    </MudItem>
                }
            </MudGrid>

            <MudPagination Color="Color.Primary" Count="pages" SelectedChanged="OnPageChanged" />
        }
</div>

@code
{
    int pageSize = 9;
    int pages = 0;
    int page = 1;
    MudChip chip;
    IEnumerable<ProductGroupDto>? productGroups = null;
    IEnumerable<ProductDto>? products = null;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? GroupId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        productGroups = await ProductsClient.GetProductGroupsAsync(false);
        
        await OnPageChanged(1);
    }

    async Task OnPageChanged(int page) 
    {
        var result = await ProductsClient.GetProductsAsync(false, GroupId, page - 1, pageSize, null, null, null);
        products = result.Items;
        
        this.pages = (int)Math.Ceiling((double)result.TotalItems / (double)pageSize);
        this.page = page;
    }

    async Task CreateProduct()
    {
        var modalRef = DialogService.Show<CreateProductModal>("New Product");

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        var product = (ProductDto)result.Data;

        NavigationManager.NavigateTo($"/products/{product.Id}/edit");
    }

    async Task SetGroup(MudChip chip)
    {
        var group = productGroups.FirstOrDefault(g => g.Name == chip.Text);
        GroupId = group?.Id;

        await OnPageChanged(1);

        this.chip = chip;

        NavigationManager.NavigateTo($"/products?groupId={GroupId}", replace: true);
    }
}

