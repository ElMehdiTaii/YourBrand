@page "/products/{productId}/attributes/groups"
@inject IProductsClient ProductsClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Products</PageTitle>

@if (product is null)
{
    <span>Loading...</span>
}
else
{
    <PageTitle>@product.Name (@product.Sku)</PageTitle>

    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-12">Attribute Groups</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateGroup" StartIcon="@Icons.Material.Filled.Add" Class="my-2">Create group</MudButton>

    <MudTable T="AttributeGroupDto" Items="attributeGroups"
              Dense="true" Hover="true">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate Context="group">
            <MudTd DataLabel="Name">@group.Name</MudTd>
            <MudTd DataLabel="Description">@group.Description</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await UpdateGroup(group)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteGroup(group)" />
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
    </MudTable>
}

@code
{
    ProductDto? product;
    List<AttributeGroupDto>? attributeGroups;

    [Parameter]
    public string? ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        product = await ProductsClient.GetProductAsync(ProductId);
        attributeGroups = (await ProductsClient.GetAttributeGroupsAsync(ProductId)).ToList();
    }

    async Task CreateGroup()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(CreateProductAttributeGroupModal.ProductId), ProductId);

        var modalRef = DialogService.Show<CreateProductAttributeGroupModal>("Create Group", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        attributeGroups.Add((AttributeGroupDto)result.Data);
    }

    async Task UpdateGroup(AttributeGroupDto attributeGroup)
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(UpdateProductAttributeGroupModal.ProductId), ProductId);
        parameters.Add(nameof(UpdateProductAttributeGroupModal.AttributeGroup), attributeGroup);

        var modalRef = DialogService.Show<UpdateProductAttributeGroupModal>("Update Group", parameters);

        var result = await modalRef.Result;

        if (result.Cancelled) return;

        var index = attributeGroups!.IndexOf(attributeGroup);

        attributeGroups[index] = (AttributeGroupDto)result.Data;
    }

    async Task DeleteGroup(AttributeGroupDto attributeGroup)
    {
        var modalResult = await DialogService.ShowMessageBox("Delete the group?", "The group will be deleted, but the attributes will remain.\nThis cannot be undone.", yesText: "Yes", noText: "No");
        if (!modalResult.GetValueOrDefault())

        {
            return;
        }

        await ProductsClient.DeleteAttributeGroupAsync(ProductId, attributeGroup.Id);

        attributeGroups.Remove(attributeGroup);
    }
}

