@page "/invoices/new"
@page "/invoices/{Id:int}"
@using Microsoft.AspNetCore.SignalR.Client;
@using System.ComponentModel.DataAnnotations
@using YourBrand.Invoices.Invoicing
@using YourBrand.Payments.Client
@using YourBrand.Transactions.Client
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject IInvoicesClient InvoicesClient
@inject ITransactionsClient TransactionsClient
@inject IPaymentsClient PaymentsClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using YourBrand.Invoices.Client

@if (invoice is not null)
{
        <PageTitle>Invoice #@Id</PageTitle>

        <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true" Class="mt-4 mb-8">Invoice #@Id</MudText>

        <MudPaper Elevation="1" Class="pa-4">

            <div class="mb-4">
                <MudButton StartIcon="@Icons.Filled.FileDownload" Link="@($"/api/invoicing/invoices/{Id}/file")">
                    Download
                </MudButton>

            @if (invoice.Status == InvoiceStatus.Draft)
            {
                        <MudButton StartIcon="@Icons.Filled.Delete" OnClick="async (e) => await DeleteInvoice(invoice)">
                            Delete
                        </MudButton>
            }
            </div>

            <MudGrid Class="mb-4">
                <MudItem xs="12" sm="12" md="6" lg="3">
                @if (Model.Status >= InvoiceStatus.Sent)
                {
                            <MudField Label="Date">@Model.Date?.ToString("yyyy-MM-dd")</MudField>
                            <MudField Label="Date">@Model.Date?.ToString("yyyy-MM-dd")</MudField>
                }
                else
                {
                            <MudDatePicker Label="Date" Date="Model.Date" DateChanged="OnDateChanged" For="() => Model.Date"></MudDatePicker>
                }
                </MudItem>

                <MudItem xs="12" sm="12" md="6" lg="3">
                    <div class="d-flex">
                        <MudField Label="Status">@Model.Status</MudField>
                        <MudIconButton Icon="@Icons.Filled.Edit" Class="justify-end"
                                   OnClick="async () => await UpdateInvoiceStatus()"></MudIconButton>
                    </div>
                </MudItem>

                <MudItem xs="12" sm="12" md="6" lg="3">
                @if (Model.Status >= InvoiceStatus.Sent)
                {
                            <MudField Label="Due Date">@Model.DueDate?.ToString("yyyy-MM-dd")</MudField>
                }
                else
                {
                            <MudDatePicker Label="Due Date" Date="@Model.DueDate" DateChanged="OnDueDateChanged" For="() => Model.DueDate">
                            </MudDatePicker>
                }
                </MudItem>

                <MudItem xs="12" sm="12" md="12">
                @if (Model.Status >= InvoiceStatus.Sent)
                {
                            <MudField Label="Reference">@Model.Reference</MudField>
                }
                else
                {
                            <MudTextField Label="Reference" Text="@Model.Reference" TextChanged="OnReferenceChanged" For="() =>Model.Reference">
                            </MudTextField>
                }
                </MudItem>

                <MudItem xs="12" sm="12" md="12">
                @if (Model.Status >= InvoiceStatus.Sent)
                {
                            <MudField Label="Note">@Model.Note</MudField>
                }
                else
                {
                            <MudTextField Label="Note" Text="@Model.Note" TextChanged="OnNoteChanged" For="() => Model.Note"></MudTextField>
                }
                </MudItem>

                <MudItem xs="6" sm="6" md="3" lg="3">
                    <MudField Label="Total">@Model.Total.FormatCurrency(invoice.Currency)</MudField>
                    </MudItem>

                    <MudItem xs="6" sm="6" md="3" lg="3">
                        <MudField Label="Sub Total">@Model.SubTotal.FormatCurrency(invoice.Currency)</MudField>
                    </MudItem>

                    <MudItem xs="6" sm="6" md="3" lg="3">
                        <MudField Label="VAT">@Model.Vat.FormatCurrency(invoice.Currency)</MudField>
                    </MudItem>

            @if (Model.DomesticService?.RequestedAmount is not null)
            {
                        <MudItem xs="6" sm="6" md="3" lg="3">
                            <MudField Label="@(Model.DomesticService.Kind == DomesticServiceKind.HomeRepairAndMaintenanceServiceType ? "Rot" : "Rut")">-@invoice.DomesticService?.RequestedAmount.FormatCurrency(invoice.Currency)</MudField>
                        </MudItem>
            }

            @if (payment is not null)
            {
                        <MudItem xs="6" sm="6" md="3" lg="3">
                            <MudField Label="Payment Status">@payment.Status</MudField>
                            <MudField Label="Reference" Class="mt-4">@payment.Reference</MudField>
                        </MudItem>
            }

            @if (Model.Paid is not null)
            {
                        <MudItem xs="6" sm="6" md="3" lg="3">
                            <MudField Label="Paid">@invoice.Paid?.FormatCurrency(invoice.Currency)</MudField>
                        </MudItem>

                if (payment?.AmountCaptured.GetValueOrDefault() != invoice.Total)
                {
                                <MudItem xs="6" sm="6" md="3" lg="3">
                        @{
                            bool remaining = false;
                            var diff = (invoice.Total - payment?.AmountCaptured ?? 0);
                            if (diff < 0)
                            {
                                diff = diff * -1;
                            }
                            else
                            {
                                remaining = true;
                            }
                        }
                                    <MudField Label="@(remaining ? "Remaining" : "Repaid")">@(diff.FormatCurrency(invoice.Currency))</MudField>
                                    </MudItem>
                }
            }

            </MudGrid>
        </MudPaper>

        <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true" Class="mt-8 mb-4">Items</MudText>

    @if (Model.Status == InvoiceStatus.Draft)
    {
                <MudButton Variant="Variant.Filled" OnClick="AddItem" Class="mb-2">Add item</MudButton>
    }

        <MudTable T="InvoiceItemViewModel" @ref="table" Dense="true" Items="Model.Items" Hover="true" Elevation="1"
              Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info" OnRowClick="async (e) => await UpdateInvoiceItem(e.Item)">
            <HeaderContent>
                <MudTh>Description</MudTh>
                <MudTh>Product Type</MudTh>
                <MudTh>Unit Price (excl. VAT)</MudTh>
                <MudTh>Quantity</MudTh>
                <MudTh>Unit</MudTh>
                <MudTh>VAT</MudTh>
                <MudTh>Total (excl. VAT)</MudTh>
            @if (Model.Status == InvoiceStatus.Draft)
            {
                        <MudTh></MudTh>
            }
            </HeaderContent>
            <RowTemplate Context="invoiceItem">
                <MudTd DataLabel="Description">@invoiceItem.Description</MudTd>
                <MudTd DataLabel="Product Type">@invoiceItem.ProductType</MudTd>
                <MudTd DataLabel="Unit Price (excl. VAT)">@invoiceItem.UnitPrice</MudTd>
                <MudTd DataLabel="Quantity">@invoiceItem.Quantity</MudTd>
                <MudTd DataLabel="Unit">@invoiceItem.Unit</MudTd>
                <MudTd DataLabel="VAT">@(invoiceItem.VatRate * 100)%</MudTd>
                <MudTd DataLabel="Line Total (excl. VAT)">@invoiceItem.LineTotal.FormatCurrency(invoice.Currency)</MudTd>
            @if (Model.Status == InvoiceStatus.Draft)
            {
                        <MudTd>
                            <MudIconButton Icon="@Icons.Filled.Delete" OnClick="async () => await DeleteItem(invoiceItem)" />
                        </MudTd>
            }
            </RowTemplate>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
        </MudTable>

    @if (invoice.DomesticService is null)
    {
        @if (Model.Status == InvoiceStatus.Draft)
        {
                        <MudButton Variant="Variant.Filled" OnClick="ActivateRotRut" Class="mt-4">Activate Rot & Rut</MudButton>
        }
    }
    else
    {
                <MudPaper Elevation="1" Class="pa-4 mt-4">
                    <MudText Typo="Typo.h6" GutterBottom="true" Class="mb-4">Rot & Rut</MudText>

                    <MudField Label="Kind">@invoice.DomesticService.Kind</MudField>
                    <MudField Label="Description" Class="mt-4">@invoice.DomesticService.Description</MudField>
                    <MudField Label="Buyer" Class="mt-4">@invoice.DomesticService.Buyer</MudField>
                    <MudField Label="Requested Amount" Class="mt-4">@invoice.DomesticService.RequestedAmount.FormatCurrency(invoice.Currency)</MudField>
                </MudPaper>
    }
}

@code
{
    InvoiceDto? invoice;
    MudTable<InvoiceItemViewModel> table;
    bool loading = false;
    TransactionStatus? Status2;
    IEnumerable<TransactionStatus?> selectedStatuses = new List<TransactionStatus?>();
    HubConnection hubConnection = null!;

    [Parameter]
    public int? Id { get; set; }

    [Required]
    public InvoiceViewModel Model { get; set;  }

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
        {
            invoice = await InvoicesClient.GetInvoiceAsync(Id.GetValueOrDefault());

            Model = invoice.ToModel();
        }
        else
        {
            invoice = await InvoicesClient.CreateInvoiceAsync(
                new CreateInvoice()
                {
                    Status = InvoiceStatus.Draft
                }
            );

            Model = invoice.ToModel();

            NavigationManager.NavigateTo($"/invoices/{Model.Id}", replace: true);

            Snackbar.Add("Created invoice draft", Severity.Info);
        }

        await Foo();
    }

    PaymentDto? payment;

    public async Task Foo()
    {
        var paymentsResults = await PaymentsClient.GetPaymentsAsync(0, 10, null, Id);
        payment = paymentsResults.Items.FirstOrDefault();

        if (payment is null)
        {
            return;
        }

        StateHasChanged();

        await InitPaymentHub(payment.Id);
    }

    async Task ActivateRotRut()
    {
        DialogParameters parameters = new();
        parameters.Add(nameof(ActivateRotOrRutDialog.Invoice), Model);
        parameters.Add(nameof(ActivateRotOrRutDialog.InvoiceDomesticService), invoice.DomesticService);

        var dialogRef = DialogService.Show<ActivateRotOrRutDialog>("Activate deduction for domestic services", parameters);
        var result = await dialogRef.Result;

        if (result.Cancelled)
        {
            return;
        }

        Model.DomesticService = (InvoiceDomesticServiceViewModel)result.Data;
    }

    async Task InitPaymentHub(string paymentId)
    {
        if (hubConnection is not null)
        {
            return;
        }

        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl($"{NavigationManager.BaseUri}api/payments/hubs/payments?paymentId={paymentId}")
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string, PaymentStatus>("PaymentStatusUpdated", PaymentStatusUpdated);

            hubConnection.Closed += (error) =>
            {
                if (error is not null)
                {
                    Snackbar.Add($"{error.Message}", Severity.Error);
                }

                Snackbar.Add("Connection closed");
                return Task.CompletedTask;
            };

            hubConnection.Reconnected += (error) =>
            {
                Snackbar.Add("Reconnected");
                return Task.CompletedTask;
            };

            hubConnection.Reconnecting += (error) =>
            {
                Snackbar.Add("Reconnecting");
                return Task.CompletedTask;
            };

            await hubConnection.StartAsync();

            Snackbar.Add("Connected");
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message.ToString(), Severity.Error);
        }
    }

    async Task PaymentStatusUpdated(string id, PaymentStatus status)
    {
        Console.WriteLine($"Payment status updated: {status}");

        await Foo();
    }

    private async Task Submit()
    {
        await Task.CompletedTask;
    }

    private async Task AddItem()
    {
        var model = new InvoiceItemViewModel();

        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(InvoiceItemDialog.InvoiceId), Id);

        var dialogRef = DialogService.Show<InvoiceItemDialog>("New Item", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled)
            return;

        var vm = (InvoiceItemViewModel)result.Data;

        Model.Items.Add(vm);
    }

    private async Task UpdateInvoiceItem(InvoiceItemViewModel model)
    {
        if(Model.Status != InvoiceStatus.Draft) 
        {
            return;
        }

        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(InvoiceItemDialog.InvoiceId), Id);
        dialogParameters.Add(nameof(InvoiceItemDialog.Model), model);

        var dialogRef = DialogService.Show<InvoiceItemDialog>("Update Item", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled)
            return;
    }

    public async Task UpdateInvoiceStatus()
    {
        int invoiceId = Id.GetValueOrDefault();

        var dialogParameters = new DialogParameters();
        dialogParameters.Add(nameof(SetStatusDialog.InvoiceId), invoiceId);
        dialogParameters.Add(nameof(SetStatusDialog.Status), Model.Status);

        var dialogRef = DialogService.Show<SetStatusDialog>("Update status", dialogParameters);

        var result = await dialogRef.Result;

        if (result.Cancelled) return;

        Model.Status = (InvoiceStatus)result.Data;

        await Foo();
    }

    private void OnSelectedValuesChanged(IEnumerable<TransactionStatus?> selectedValues)
    {
        selectedStatuses = selectedValues;

        StateHasChanged();
    }

    public async Task OnDateChanged(DateTime? date)
    {
        try
        {
            if (date != Model.Date)
            {
                date = TimeZoneInfo.ConvertTimeToUtc(date.GetValueOrDefault(), TimeZoneInfo.Local);

                await InvoicesClient.SetDateAsync(Id.GetValueOrDefault(),
                date.GetValueOrDefault().ToUniversalTime());

                Model.Date = date;
            }
        }
        catch (Exception)
        {
            Model.Date = date;
        }
    }

    public async Task OnDueDateChanged(DateTime? date)
    {
        try
        {
            if (date !=Model. DueDate)
            {
                date = TimeZoneInfo.ConvertTimeToUtc(date.GetValueOrDefault(), TimeZoneInfo.Local);

                await InvoicesClient.SetDueDateAsync(Id.GetValueOrDefault(),
                date.GetValueOrDefault().ToUniversalTime());

                Model.DueDate = date;
            }
        }
        catch (Exception)
        {

        }
    }

    public async Task OnReferenceChanged(string? reference)
    {
        if (reference != Model.Reference)
        {
            await InvoicesClient.SetReferenceAsync(Id.GetValueOrDefault(), reference);
            Model.Reference = reference;
        }
    }

    public async Task OnNoteChanged(string? note)
    {
        if (note != Model.Note)
        {
            await InvoicesClient.SetNoteAsync(Id.GetValueOrDefault(), note);
            Model.Note = note;
        }
    }

    private async Task DeleteInvoice(InvoiceDto invoice)
    {
        var result = await DialogService.ShowMessageBox("Delete draft invoice", "Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault())
            return;

        await InvoicesClient.DeleteInvoiceAsync(invoice.Id);

        NavigationManager.NavigateTo("/invoices");
    }

    async Task DeleteItem(InvoiceItemViewModel invoiceItem)
    {
        var result = await DialogService.ShowMessageBox("Delete item", "Are you sure?", "Yes", "No");

        if (!result.GetValueOrDefault())
            return;

        await InvoicesClient.DeleteInvoiceItemAsync(Id.GetValueOrDefault(), invoiceItem.Id);

        Model.Items.Remove(invoiceItem);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is null)
            return;

        await hubConnection.DisposeAsync();
    }
    }