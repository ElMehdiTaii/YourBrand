@page "/teams"

@attribute [Authorize(Roles = "Administrator,Manager")]
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ITeamsClient TeamsClient
@inject IUsersClient UsersClient

<PageTitle>Teams - YourBrand</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Teams</MudText>

<MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OnNewTeamClicked">New Team</MudButton>

<MudTable T="TeamDto" ServerData="@(new Func<TableState, Task<TableData<TeamDto>>>(ServerReload))"
          Hover="true" @ref="table" Class="mt-4" OnRowClick="(e) => GotToTeam(e.Item)">
    <ToolBarContent>
        <MudAutocomplete T="UserDto" Label="User" Variant="Variant.Text" Dense="true" Value="User" ValueChanged="OnUserChanged" SearchFunc="@Search1"
                         For="() => User"
                         ToStringFunc="u => u?.GetDisplayName()"
                         ResetValueOnEmptyText="true"
                         CoerceText="true" CoerceValue="true"
                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" DebounceInterval="500"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel T="TeamDto" SortLabel="Name">Name</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>

    <RowTemplate Context="team">
        <MudTd DataLabel="Name">@team.Name</MudTd>
        <MudTd>
            @* <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await OnEditTeamClicked(timeSheet)" /> *@
            @* <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await DeleteOption(option)" /> *@
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    MudTable<TeamDto> table;
    string searchString;

    UserDto? User { get; set; }

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task<TableData<TeamDto>> ServerReload(TableState state)
    {
        var page = await TeamsClient.GetTeamsAsync(state.Page, state.PageSize, /* null,  User?.Id, */ searchString,
            state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortDirection == MudBlazor.SortDirection.Descending ? TimeReport.Client.SortDirection.Desc : TimeReport.Client.SortDirection.Asc);

        return new TableData<TeamDto>() { TotalItems = page.TotalItems, Items = page.Items };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task<IEnumerable<UserDto>> Search1(string value)
    {
        var page = await UsersClient.GetUsersAsync(0, 10, value, null, null);

        return page.Items;
    }

    void OnUserChanged(UserDto user)
    {
        User = user;

        table.ReloadServerData();
    }

    private void GotToTeam(TeamDto team)
    {
        NavigationManager.NavigateTo($"/teams/{team.Id}");
    }

    private async Task OnNewTeamClicked()
    {
        var dialogRef = DialogService.Show<TeamDialog>("New Team");

        var dialogResult = await dialogRef.Result;

        if (dialogResult.Cancelled)
            return;

        searchString = null;
        table.ReloadServerData();
    }

    private async Task OnEditTeamClicked(TeamDto timeSheet)
    {
        /*
    DialogParameters parameters = new();
    parameters.Add(nameof(TimeSheetDialog.TimeSheetId), timeSheet.Id);

    var dialogRef = DialogService.Show<TimeSheetDialog>($"Edit {timeSheet.FirstName}", parameters);

    var dialogResult = await dialogRef.Result;

    if (dialogResult.Cancelled)
        return;

    table.ReloadServerData();
        */
    }
}
