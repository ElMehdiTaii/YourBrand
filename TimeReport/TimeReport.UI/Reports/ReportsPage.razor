@page "/reports"
@attribute [Authorize]
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IProjectsClient ProjectsClient
@inject IUsersClient UsersClient
@inject IReportsClient ReportsClient
@inject IJSRuntime JS

<AppPageTitle>Reports - YourBrand</AppPageTitle>

@if (projects is null)
{
    <LoadingIndicator />
}
else
{
    <MudText Typo="Typo.h3" GutterBottom="true">Reports</MudText>
    
    <MudCard Elevation="25">
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" md="4">
                    <MudDateRangePicker Label="Time span" HelperText="Select a date range" @bind-DateRange="selectedDateRange" />

                    <MudSelect Label="Grouping" Class="mt-8" HelperText="Select grouping mode" @bind-Value="mode" ToStringFunc="x => x.ToString()">
                        <MudSelectItem Value="@ReportModeDto.Project">Project</MudSelectItem>
                        <MudSelectItem Value="@ReportModeDto.User">User</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudSelect T="UserDto" Label="User" HelperText="Select a user" Value="user" ValueChanged="OnUserChanged" Clearable=true ToStringFunc="x => ( x?.GetDisplayName() ?? AllLabel)">
                        <MudSelectItem Value="@((UserDto)null)">@AllLabel</MudSelectItem>
                        @foreach (var u in users)
                        {
                            <MudSelectItem Value="@u">@u.GetDisplayName()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudSelect T="ProjectDto" Label="Projects" HelperText="Select projects" MultiSelection="true" @bind-Value="value" @bind-SelectedValues="options" ToStringFunc="x => x.Name">
                        @foreach (var project in projects)
                        {
                            <MudSelectItem Value="@project">@project.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <MudSelect T="TimeSheetStatusDto" Label="Statuses" Class="mt-8" HelperText="Select statuses of timesheets to include" MultiSelection="true" @bind-SelectedValues="selectedStatuses" ToStringFunc="x => x.ToString()">
                        @foreach (var status in statuses)
                        {
                            <MudSelectItem Value="@status">@status.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="12">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateReport">Create Report</MudButton>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>
}

@code
{
    const string AllLabel = "All";

    private bool isLoading = false;

    DateRange selectedDateRange = new DateRange(DateTime.Now.Date.AddMonths(-1), DateTime.Now.Date);

    private UserDto? user { get; set; }

    private IEnumerable<UserDto> users { get; set; }

    private ProjectDto? value { get; set; }

    private IEnumerable<ProjectDto> options { get; set; } = new HashSet<ProjectDto>();

    private IEnumerable<ProjectDto>? projects = null;

    private TimeSheetStatusDto status { get; set; }

    private IEnumerable<TimeSheetStatusDto>? statuses = null;

    private IEnumerable<TimeSheetStatusDto> selectedStatuses { get; set; } = new HashSet<TimeSheetStatusDto>();

    private ReportModeDto mode = ReportModeDto.Project;

    protected async Task OnUserChanged(UserDto user)
    {
        this.user = user;

        var page = await ProjectsClient.GetProjectsAsync(0, 10, user?.Id, null, null, null);
        projects = page.Items;
        options = new HashSet<ProjectDto>();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            var page = await UsersClient.GetUsersAsync(0, 10, null, null, null);
            users = page.Items;

            var page2 = await ProjectsClient.GetProjectsAsync(0, 10, null, null, null, null);
            projects = page2.Items;

            statuses = Enum.GetValues<TimeSheetStatusDto>().Select(x => (TimeSheetStatusDto)x);
            ((HashSet<TimeSheetStatusDto?>)selectedStatuses).Add(TimeSheetStatusDto.Approved);
        }
        catch (Exception e)
        {

        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CreateReport()
    {
        var fileResponse = await ReportsClient.GetReportAsync(options.Select(x => x.Id), user?.Id, selectedDateRange.Start, selectedDateRange.End, selectedStatuses.Select(x => (int)x), mode);

        using var streamRef = new DotNetStreamReference(stream: fileResponse.Stream);

        await JS.InvokeVoidAsync("downloadFileFromStream", "TimeReport.xlsx", streamRef);
    }
}