@inherits LayoutComponentBase
@using YourBrand.Portal.Theming
@using Blazored.LocalStorage
@inject ThemeManager ThemeManager
@inject ILocalStorageService LocalStorage

<MudThemeProvider IsDarkMode="@(_currentColorScheme == ColorScheme.Dark)" Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <AppBar DrawerToggleCallback="DrawerToggle" />
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" DisableOverlay="true" Elevation="2" Variant="@DrawerVariant.Persistent">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        @Body

        <MudScrollToTop>
            <MudFab Color="Color.Tertiary" Icon="@Icons.Filled.ArrowCircleUp" />
        </MudScrollToTop>
    </MudMainContent>
</MudLayout>

@code {
    private MudTheme _theme = new MudTheme()
    {
        Typography = new Typography()
        {
            Default = new Default()
            {
                FontFamily = new[] { "Roboto", "sans-serif" }
            }
        },
        Palette = new Palette
        {
            Background = "#f9f9f9",
            AppbarBackground = "#242222",
            Primary = "#63a9cb",
            //Secondary = "#00000000"
        }
    };

    bool _drawerOpen = false;
    ColorScheme? _currentColorScheme;

    protected override async Task OnInitializedAsync()
    {
        ThemeManager.ColorSchemeChanged += OnColorSchemeChanged;
        _currentColorScheme = ThemeManager.CurrentColorScheme;

        _drawerOpen = await LocalStorage.GetItemAsync<bool?>("drawerOpen") ?? true;
    }

    async Task DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;

        await LocalStorage.SetItemAsync("drawerOpen", _drawerOpen);
    }

    void OnColorSchemeChanged(object? sender, ColorSchemeChangedEventArgs ea)
    {
        _currentColorScheme = ea.ColorScheme;

        StateHasChanged();
    }
}