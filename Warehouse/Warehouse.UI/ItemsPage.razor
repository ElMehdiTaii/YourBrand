@using Microsoft.AspNetCore.SignalR.Client;

@page "/warehouse/items"

@inject IItemsClient ItemsClient
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>Items</PageTitle>

<MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true" Class="mt-4 mb-8">Items</MudText>

@* <MudButton Variant="Variant.Filled" OnClick="NewItem" Class="mb-2">New transaction</MudButton> *@

<MudTable T="ItemDto" @ref="table" ServerData="ServerReload" Hover="true" Elevation="1" Breakpoint="Breakpoint.Sm"
    Loading="@loading" LoadingProgressColor="Color.Info" >
    
     <HeaderContent>
         <MudTh>First Name</MudTh>
         <MudTh>Last Name</MudTh>
         <MudTh>SSN</MudTh>
     </HeaderContent>
     <RowTemplate Context="prospect">
         <MudTd DataLabel="FirstName">@prospect.FirstName</MudTd>
         <MudTd DataLabel="LastName">@prospect.LastName</MudTd>
         <MudTd DataLabel="SSN">@prospect.Ssn</MudTd>
     </RowTemplate>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code
{
    MudTable<ItemDto> table = null!;
    bool loading = false;

    private async Task<TableData<ItemDto>> ServerReload(TableState state)
    {
        loading = true;

        try
        {
            var result = await ItemsClient.GetItems2Async(state.Page, state.PageSize);

            return new TableData<ItemDto>() { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            loading = false;
        }
    }

    private TableData<ItemDto>? GetTableData()
    {
        return (TableData<ItemDto>?)table?.GetType()?
            .GetField("_server_data", System.Reflection.BindingFlags.NonPublic |
                         System.Reflection.BindingFlags.Instance)?
            .GetValue(table);
    }
}