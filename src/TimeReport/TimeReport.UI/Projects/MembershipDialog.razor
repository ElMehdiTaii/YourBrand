@using System.ComponentModel.DataAnnotations
@inject IProjectsClient ProjectsClient
@inject IUsersClient UsersClient

<EditForm Model="@this" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>
            @if (MembershipId is null)
            {

                <UserSelector ServiceKey="@ServiceKeys.UserSearchProviderKey"  Label="User" Variant="Variant.Outlined" @bind-Value="User"
                        For="() => User" Class="mb-4" />
            }
        </DialogContent>

        <DialogActions>
            <MudButton OnClick="() => Modal.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">@(MembershipId is null ? "Create" : "Save changes")</MudButton>
        </DialogActions>
    </MudDialog>

</EditForm>

@code {
    [CascadingParameter] MudDialogInstance Modal { get; set; }

    [Parameter] public string? ProjectId { get; set; }

    [Parameter] public string? MembershipId { get; set; }

    [Required]
    public Portal.User User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (MembershipId is not null)
        {
            var result = await ProjectsClient.GetProjectMembershipAsync(ProjectId, MembershipId);

            User = result.User.ToUser();
        }
    }

    async Task OnSubmit()
    {
        ProjectMembership? result = null;

        if (MembershipId is null)
        {
            result = await ProjectsClient.CreateProjectMembershipAsync(ProjectId, new CreateProjectMembership
            {
                UserId = User.Id
            });
        }
        else
        {
            result = await ProjectsClient.UpdateProjectMembershipAsync(ProjectId, MembershipId, new UpdateProjectMembership());
        }

        Modal.Close(DialogResult.Ok(result));
    }
}