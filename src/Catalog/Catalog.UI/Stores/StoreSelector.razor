@using YourBrand.Portal.AppBar
@using YourBrand.Portal.Services
@inject IStoreProvider StoreProvider
@inject ISnackbar Snackbar
@using YourBrand.Catalog
@implements IDisposable
@using Store = YourBrand.Portal.Services.Store

<MudMenu Dense="true" Color="Color.Inherit" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight"
    PopoverClass="docs-layout-menu-shadow" ListClass="pa-0 docs-menu-list" LockScroll="true">
    <ActivatorContent>
        <MudIconButton Class="ma-1" Icon="@Icons.Material.Filled.Shop" Color="Color.Inherit" Edge="Edge.Start" />
    </ActivatorContent>
    <ChildContent>
      @if(error) 
      {
        <MudMenuItem Class="py-2">
            <MudText>Failed to load stores.</MudText>
         </MudMenuItem>
      }
      else 
      {
            foreach (var item in items)
            {
                <MudMenuItem @key="@item" Class="py-2" OnClick="async () => await StoreProvider.SetCurrentStore(item.Id)">
                    <div class="d-flex">
                        <MudIcon Icon="@(currentStore?.Id == item.Id ? Icons.Material.Filled.Check : null)"
                            class="me-2" />
                        <MudText Style="overflow: hidden; white-space: nowrap;">@item.Name</MudText>
                    </div>
                </MudMenuItem>
            }
        }
    </ChildContent>
</MudMenu>

@code {
    bool error;
    IEnumerable<YourBrand.Portal.Services.Store> items = Enumerable.Empty<YourBrand.Portal.Services.Store>();
    YourBrand.Portal.Services.Store? currentStore;

    [CascadingParameter]
    public AppBarTrayItem AppBarTrayItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            StoreProvider.CurrentStoreChanged += OnCurrentStoreChanged;

            items = await StoreProvider.GetAvailableStoresAsync();

            StateHasChanged();
        }
        catch 
        {
            error = true;
        }
    }

    private void OnCurrentStoreChanged(object? sender, EventArgs e)
    {
        var firstTime = currentStore is null;

        currentStore = StoreProvider.CurrentStore;

        if (currentStore is null) return;

        AppBarTrayItem.Name = currentStore.Name;

        StateHasChanged();

        if (!firstTime) 
        {
            Snackbar.Add($"Switched to store: {currentStore.Name}");
        }
    }

    public void Dispose()
    {
        StoreProvider.CurrentStoreChanged -= OnCurrentStoreChanged;
    }
}