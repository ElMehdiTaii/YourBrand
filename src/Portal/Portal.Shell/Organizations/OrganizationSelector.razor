@using YourBrand.Portal.AppBar
@using YourBrand.Portal.Services
@inject IOrganizationProvider OrganizationProvider
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@implements IDisposable
@using Organization = YourBrand.Portal.Services.Organization

<MudMenu Dense="true" Color="Color.Inherit" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight"
    PopoverClass="docs-layout-menu-shadow" ListClass="pa-2 docs-menu-list" LockScroll="true">
    <ActivatorContent>
        <MudIconButton Class="ma-1" Icon="@Icons.Material.Filled.Business" Color="Color.Inherit" Edge="Edge.Start" />
    </ActivatorContent>
    <ChildContent>
      @if(error) 
      {
        <MudMenuItem>
            <MudText>Failed to load organizations.</MudText>
         </MudMenuItem>
      }
      else 
      {
            foreach (var item in items)
            {
                <MudMenuItem @key="@item" OnClick="async () => await OrganizationProvider.SetCurrentOrganization(item.Id)">
                    <div class="d-flex">
                        <MudIcon Icon="@(currentOrganization?.Id == item.Id ? Icons.Material.Filled.Check : null)"
                            class="me-2" />
                        <MudText Style="overflow: hidden; white-space: nowrap;">@item.Name</MudText>
                    </div>
                </MudMenuItem>
            }
        }
    </ChildContent>
</MudMenu>

@code {
    bool error;
    IEnumerable<YourBrand.Portal.Services.Organization> items = Enumerable.Empty<YourBrand.Portal.Services.Organization>();
    YourBrand.Portal.Services.Organization? currentOrganization;

    [CascadingParameter]
    public AppBarTrayItem AppBarTrayItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            OrganizationProvider.CurrentOrganizationChanged += OnCurrentOrganizationChanged;

            items = await OrganizationProvider.GetAvailableOrganizationsAsync();

            StateHasChanged();
        }
        catch 
        {
            error = true;
        }
    }

    private void OnCurrentOrganizationChanged(object? sender, EventArgs e)
    {
        var firstTime = currentOrganization is null;

        if(currentOrganization == OrganizationProvider.CurrentOrganization)
            return;

        currentOrganization = OrganizationProvider.CurrentOrganization;

        if (currentOrganization is null) return;

        AppBarTrayItem.Name = currentOrganization.Name; 

        StateHasChanged();

        if(!firstTime) 
        {
            Snackbar.Add($"Switched to organization: {currentOrganization.Name}");

            NavigationManager.NavigateTo("/");
        }
    }
    
    public void Dispose()
    {
        OrganizationProvider.CurrentOrganizationChanged -= OnCurrentOrganizationChanged;
    }
}