@page "/notifications/create"
@using YourBrand.AppService.Client
@attribute [Authorize]
@inject IStringLocalizer<NotificationsPage> T
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject INotificationsClient NotificationsClient
@inject ICurrentUserService CurrentUserService
@using System.ComponentModel.DataAnnotations

<AppPageTitle>@T["Send notification"]</AppPageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">@T["Send notification"]</MudText>

<MudPaper Elevation="25" Class="pa-8">

    <EditForm Model="@this" OnValidSubmit="Send">
        <DataAnnotationsValidator />

        <MudTextField Label="Title" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Title" For="() => Title" />

        <MudTextField Label="Text" Lines="5" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Text" For="() => Text" />

        <MudTextField Label="Link" Class="mb-6" Variant="Variant.Outlined" @bind-Value="Link" For="() => Link" />

        <MudTextField Label="User Id" Class="mb-6" Variant="Variant.Outlined" @bind-Value="UserId" For="() => UserId" />

        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Create</MudButton>
    </EditForm>

</MudPaper>

@code 
{
    [Required]
    public string Title { get; set; }

    [Required]
    public string Text { get; set; }

    public string? UserId { get; set; }

    public string? Link { get; set; }

    protected async override Task OnInitializedAsync() 
    {
        UserId = await CurrentUserService.GetUserId();
    }

    async Task Send() 
    {
        await NotificationsClient.CreateNotificationAsync(new YourBrand.AppService.Client.CreateNotification {
            Title = Title,
            Text = Text,
            UserId = UserId,
            Link = Link
        });
    }
}