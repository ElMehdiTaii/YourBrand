@page "/skills/areas"
@attribute [Authorize]
@using YourBrand.Showroom.Consultants.Profile
@inject ISkillAreasClient SkillAreasClient
@inject IIndustriesClient IndustriesClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudText Typo="Typo.h3" Class="mb-4">Skill Areas</MudText>

<MudButton Variant="Variant.Filled" OnClick="async () => await OnSkillAreaClicked(null)" StartIcon="@Icons.Filled.Add" Color="Color.Default" Class="mb-2 me-2">
    New Skill Area
</MudButton>

<MudPaper Class="pa-4" Elevation="25">
    <MudTable @ref="table" T="SkillAreaDto" Elevation="0" ServerData="LoadData" Dense="false" Hover="true" Bordered="false"
              Striped="true" OnRowClick="ItemOnClick">
        <ToolBarContent>

            <MudAutocomplete T="IndustryDto" Label="Industry" Dense="true" Variant="Variant.Text" ResetValueOnEmptyText="true" Value="Industry" ValueChanged="(ca) => OnIndustryChanged(ca)" For="() => Industry" SearchFunc="SearchIndustry" ToStringFunc="(x) => x.Name">
                <ItemTemplate Context="context2">
                        <MudText Typo="Typo.body1">@context2.Name</MudText>
                </ItemTemplate>

                <ItemSelectedTemplate Context="context2">
                        <MudText Typo="Typo.body1">@context2.Name</MudText>
                </ItemSelectedTemplate>
            </MudAutocomplete>

            <MudSpacer />

            <MudTextField T="string" Dense="true" Value="searchString" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate="true" DebounceInterval="200"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel T="SkillAreaDto" SortLabel="Name">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="SkillAreaDto" SortLabel="Industry">Industry</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Industry">@context.Industry.Name</MudTd> 
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudPaper>


@code {
    MudTable<SkillAreaDto> table; 
    string? searchString;

    public IndustryDto Industry { get; set; }

    private async Task<TableData<SkillAreaDto>> LoadData(TableState state)
    {
        try
        {
            var results = await SkillAreasClient.GetSkillAreasAsync(state.Page + 1, state.PageSize, Industry?.Id, searchString, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ? YourBrand.Showroom.Client.SortDirection.Asc : YourBrand.Showroom.Client.SortDirection.Desc));
            return new TableData<SkillAreaDto> { Items = results.Items, TotalItems = results.TotalCount };
        }
        /*catch (ApiException exc)
        {
        }
        catch (HttpRequestException exc)
        {
        }*/
        catch (Exception exc)
        {
            //await JSHelpers.Alert(exc.Message);
        }

        return null!;
    }

    private async Task ItemOnClick(TableRowClickEventArgs<SkillAreaDto> ev)
    {
        var item = ev.Item;

        await OnSkillAreaClicked(item);
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task OnIndustryChanged(IndustryDto sa)
    {
        Industry = sa;
        table.ReloadServerData();
    }


    async Task<IEnumerable<IndustryDto>> SearchIndustry(string text)
    {
        try
        {
            var results = await IndustriesClient.GetIndustriesAsync(1, 10, text, null, null, default);
            return results.Items;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null;
    }

    async Task OnSkillAreaClicked(SkillAreaDto? dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(SkillAreaDialog.SkillAreaId), dto?.Id);

            var dialogReference = DialogService.Show<SkillAreaDialog>(dto is null ? "New Skill Area" : $"Update {dto.Name}", parameters, new DialogOptions {
                //FullScreen = true,
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Cancelled)
                return;

            await table.ReloadServerData();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}