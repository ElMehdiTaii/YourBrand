@page "/consultants/find"
@attribute [Authorize]
@layout BaseLayout
@using System.ComponentModel.DataAnnotations
@using YourBrand.Showroom.Consultants.Profile
@inject IConsultantsClient ConsultantProfilesClient
@inject IOrganizationsClient OrganizationsClient
@inject ICompetenceAreasClient CompetenceAreasClient
@inject NavigationManager NavigationManager

<MudContainer Class="mt-16 mb-16" MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h3" Class="mb-4">Find Consultants</MudText>

    <MudGrid>

        <MudItem sm="12" md="9">

    <MudPaper Class="pa-4" Elevation="25">
        <MudTable @ref="table" T="ConsultantProfileDto" Elevation="0" ServerData="LoadData" Dense="false" Hover="true" Bordered="false"
                Striped="true" OnRowClick="ItemOnClick">
            <ToolBarContent>
                <MudAutocomplete T="OrganizationDto" Label="Organization" Dense="true" Variant="Variant.Text" ResetValueOnEmptyText="true" Value="Organization" ValueChanged="(o) => OnOrganizationChanged(o)" For="() => Organization" SearchFunc="SearchOrganizations" ToStringFunc="(x) => x.Name">
                    <ItemTemplate Context="context2">
                        <MudText Typo="Typo.body1">@context2.Name</MudText>
                    </ItemTemplate>

                    <ItemSelectedTemplate Context="context2">
                        <MudText Typo="Typo.body1">@context2.Name</MudText>
                    </ItemSelectedTemplate>
                </MudAutocomplete>

                <MudSpacer />

                <MudAutocomplete T="CompetenceAreaDto" Label="Competence Area" Dense="true" Variant="Variant.Text" ResetValueOnEmptyText="true" Value="CompetenceArea" ValueChanged="(ca) => OnCompetenceAreaChanged(ca)" For="() => CompetenceArea" SearchFunc="SearchCompetenceAreas" ToStringFunc="(x) => x.Name">
                    <ItemTemplate Context="context2">
                        <MudText Typo="Typo.body1">@context2.Name</MudText>
                    </ItemTemplate>

                    <ItemSelectedTemplate Context="context2">
                        <MudText Typo="Typo.body1">@context2.Name</MudText>
                    </ItemSelectedTemplate>
                </MudAutocomplete>

                <MudSpacer />

                <MudTextField T="string" Dense="true" Value="searchString" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate="true" DebounceInterval="200"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh><MudTableSortLabel T="ConsultantProfileDto" SortLabel="FirstName">First Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="ConsultantProfileDto" SortLabel="LastName">Last Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="ConsultantProfileDto" SortLabel="DisplayName">Display Name</MudTableSortLabel></MudTh>
                @*<MudTh><MudTableSortLabel T="ConsultantProfileDto" SortLabel="Headline">Headline</MudTableSortLabel></MudTh>*@
                <MudTh><MudTableSortLabel T="ConsultantProfileDto" SortLabel="CompetenceArea">Competence Area</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel T="ConsultantProfileDto" SortLabel="Organization">Organization</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    <ProfileImage ConsultantProfile="context" Height="50" Width="50" />
                </MudTd>
                <MudTd DataLabel="First Name">@context.FirstName</MudTd>
                <MudTd DataLabel="Last Name">@context.LastName</MudTd>
                <MudTd DataLabel="Display Name">@context.DisplayName</MudTd>
                @*<MudTd DataLabel="Headline">@context.Headline</MudTd>*@
                <MudTd DataLabel="Competence Area">@context.CompetenceArea?.Name</MudTd>
                <MudTd DataLabel="Organization">@context.Organization?.Name</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudPaper>

        </MudItem>
        
        <MudItem sm="12" md="3">
    <MudExpansionPanels Class="mb-10" Elevation="25">
        <MudExpansionPanel Text="Skills" Class="pa-2" IsExpanded="true">
            <SkillsSelector Model="Model" OnUpdated="OnSelectorUpdate" />
        </MudExpansionPanel>
      
    </MudExpansionPanels>

        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    MudTable<ConsultantProfileDto> table; 
    string? searchString;

    public OrganizationDto? Organization { get; set; }
    public CompetenceAreaDto? CompetenceArea { get; set; }

    public SkillSelectorVm Model { get; set; } = new SkillSelectorVm();

    async Task OnSelectorUpdate() 
    {
        await table.ReloadServerData();
    }

    private async Task<TableData<ConsultantProfileDto>> LoadData(TableState state)
    {
        try
        {
            var query = new ConsultantQuery {
                OrganizationId = Organization?.Id,
                CompetenceAreaId = CompetenceArea?.Id,
                SearchString = searchString,
                Skills = Model.Skills.Where(x => x.Selected).Select(s => new QuerySkill {
                    SkillId = s.Skill.Id,
                    Level = s.Level
                }).ToList()
            };

            var results = await ConsultantProfilesClient.FindConsultantsQueryAsync(state.Page + 1, state.PageSize, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : (state.SortDirection == MudBlazor.SortDirection.Ascending ? YourBrand.Showroom.Client.SortDirection.Asc : YourBrand.Showroom.Client.SortDirection.Desc), query);
            return new TableData<ConsultantProfileDto> { Items = results.Items, TotalItems = results.TotalCount };
        }
        /*catch (ApiException exc)
        {
        }
        catch (HttpRequestException exc)
        {
        }*/
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }

        return new TableData<ConsultantProfileDto> { Items = Enumerable.Empty<ConsultantProfileDto>(), TotalItems = 0 };
    }

    private async Task ItemOnClick(TableRowClickEventArgs<ConsultantProfileDto> ev)
    {
        var item = ev.Item;

        NavigationManager.NavigateTo($"/Consultants/{item.Id}");
    }

    async Task<IEnumerable<OrganizationDto>> SearchOrganizations(string text)
    {
        try
        {
            var results = await OrganizationsClient.GetOrganizationsAsync(1, 10, text, null, null, default);
            return results.Items;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null;
    }

    async Task<IEnumerable<CompetenceAreaDto>> SearchCompetenceAreas(string text)
    {
        try
        {
            var results = await CompetenceAreasClient.GetCompetenceAreasAsync(1, 10, text, null, null, default);
            return results.Items;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null;
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task OnOrganizationChanged(OrganizationDto o)
    {
        Organization = o;
        table.ReloadServerData();
    }

    private async Task OnCompetenceAreaChanged(CompetenceAreaDto ca)
    {
        CompetenceArea = ca;
        table.ReloadServerData();
    }
}