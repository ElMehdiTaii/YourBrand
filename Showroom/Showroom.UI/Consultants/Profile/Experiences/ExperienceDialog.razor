@using System.ComponentModel.DataAnnotations
@inject IConsultantsClient ConsultantsClient
@inject ICompaniesClient CompaniesClient
@inject ISnackbar Snackbar

<div style="width: 350px; max-width: 350px;">
    <EditForm Model="@this" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudDialog>
            <DialogContent>
                <MudTextField Label="Title" Variant="Variant.Outlined"
                              @bind-Value="Title" For="@(() => Title)" />

                <MudAutocomplete T="CompanyDto" Label="Company" Dense="true" Variant="Variant.Outlined" Class="mb-2"  ResetValueOnEmptyText="true" @bind-Value="Company" For="() => Company" SearchFunc="SearchCompany" ToStringFunc="(x) => x.Name">
                    <ItemTemplate Context="context2">
                        <MudText Typo="Typo.body1">@context2.Name</MudText>
                    </ItemTemplate>

                    <ItemSelectedTemplate Context="context2">
                        <MudText Typo="Typo.body1">@context2.Name</MudText>
                    </ItemSelectedTemplate>
                </MudAutocomplete>

                <MudTextField Label="Location" Class="mb-2" Variant="Variant.Outlined"
                              @bind-Value="Location" For="@(() => Location)" />
                <MudSelect Label="Employment Type" Variant="Variant.Outlined" Class="mb-2" @bind-Value="EmploymentType" For="() => EmploymentType">
                    @foreach(var optionType in Enum.GetValues<EmploymentType>())
                    {
                        <MudSelectItem Value="@optionType">@(optionType.GetAttribute<DisplayAttribute>()!.Name)</MudSelectItem>
                    }     
                </MudSelect>
                <MudGrid>
                    <MudItem xs="12" sm="6" md="6">
                        <MudDatePicker Label="Start date" Variant="Variant.Outlined" @bind-Date="StartDate" For="@(() => StartDate)" Class="mb-2" />
                    </MudItem>

                    <MudItem xs="12" sm="6" md="6">
                        <MudDatePicker Label="End date" HelperText="Optional" Variant="Variant.Outlined" @bind-Date="EndDate" For="@(() => EndDate)" Class="mb-2" />
                    </MudItem>
                </MudGrid>
                <MudTextField Label="Description" Lines="5" Variant="Variant.Outlined" Class="mb-2"
                              @bind-Value="Description" For="@(() => Description)" />
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => Dialog.Cancel()">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text" Color="Color.Primary">Add</MudButton>
            </DialogActions>
        </MudDialog>

    </EditForm>
</div>

@code
{
    [CascadingParameter]
    public MudDialogInstance Dialog { get; set; } = null!;

    [Parameter]
    public string ConsultantProfileId { get; set; } = null!;

    [Parameter]
    public ExperienceDto? Experience { get; set; }

    [Required]
    public string Title { get; set; }

    [Required]
    public CompanyDto Company { get; set; }

    [Required]
    public string Location { get; set; }

    [Required]
    public EmploymentType EmploymentType { get; set; }

    [Required]
    public DateTime? StartDate { get; set; }

    public DateTime? EndDate { get; set; }

    [MaxLength(1024)]
    public string? Description { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Experience is not null) 
        {
            Title = Experience.Title;
            Company = Experience.Company;
            Location = Experience.Location;
            EmploymentType = Enum.Parse<EmploymentType>(Experience.EmploymentType);
            StartDate = Experience.StartDate.Date;
            EndDate = Experience.EndDate?.Date;
            Description = Experience.Description;
        }
    }
    
    public async Task OnValidSubmit()
    {
        if (Experience is null)
        {
            await ConsultantsClient.AddExperienceAsync(ConsultantProfileId, new CreateExperienceDto
            {
                Title = Title,
                CompanyId = Company.Id,
                Location = Location,
                EmploymentType = EmploymentType.ToString(),
                StartDate = StartDate.GetValueOrDefault().Date,
                EndDate = EndDate,
                Description = Description
            });
        }
        else
        {
            await ConsultantsClient.UpdateExperienceAsync(ConsultantProfileId, Experience.Id, new UpdateExperienceDto
            {
                Title = Title,
                CompanyId = Company.Id,
                Location = Location,
                EmploymentType = EmploymentType.ToString(),
                StartDate = StartDate.GetValueOrDefault().Date,
                EndDate = EndDate,
                Description = Description
            });
        }

        Dialog.Close(DialogResult.Ok(true));
    }

    async Task<IEnumerable<CompanyDto>> SearchCompany(string text)
    {
        try
        {
            var results = await CompaniesClient.GetCompaniesAsync(1, 10, text, null, null, default);
            return results.Items;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null;
    }
}