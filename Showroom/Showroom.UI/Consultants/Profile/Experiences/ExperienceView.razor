@{
    var experience = Model.experience;

    var now = ExperienceExtensions.GetNowDate();

    var startDate = experience.GetStartDate();
    DateTime? endDate = experience.GetEndDate();
}

<div class="d-flex justify-space-between align-center">
    <div>
        @*<MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await AddOrEditexperience(experience)" />
            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="async () => await Removeexperience(experience)" />*@
    </div>
</div>

<MudText Typo="Typo.body2">
    @if (Model.isSub)
    {
        <p>@experience.EmploymentType</p>
    }
    else
    {
        <p>@experience.CompanyName • @experience.EmploymentType</p>
    }
</MudText>

<MudText Typo="Typo.body2">
    @experience.StartDate.ToString("MMMM yyyy") - @(experience.EndDate?.ToString("MMMM yyyy") ??
    "Now") · @(((experience.EndDate ?? DateTime.Now.Date) - experience.StartDate).Humanize(minUnit:
    Humanizer.Localisation.TimeUnit.Month, maxUnit: Humanizer.Localisation.TimeUnit.Year, precision: 2))
</MudText>
<MudText Typo="Typo.body2">@experience.Location</MudText>

<MudText Typo="Typo.body1" Class="mt-4 mb-2">
    @((MarkupString)experience.Description.Replace("\n", "<br />"))
</MudText>


@code {
    [Parameter]
    [EditorRequired]
    public Obj Model { get; set; }}