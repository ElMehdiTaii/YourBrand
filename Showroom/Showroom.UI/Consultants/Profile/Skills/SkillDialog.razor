@using System.ComponentModel.DataAnnotations
@inject IConsultantsClient ConsultantsClient
@inject ISnackbar Snackbar
@inject ISkillsClient SkillsClient

<EditForm EditContext="@context" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog DisableSidePadding="true">
        <DialogContent>
            <MudContainer Style="max-height: 500px; overflow-y: scroll">
                @if(ConsultantProfileSkillId is null) 
                {
                    <MudAutocomplete T="SkillDto" Label="Skill" Variant="Variant.Outlined" Class="flex-grow-1" @bind-Value="Skill"
                        For="() => Skill" SearchFunc="SearchSkills" ToStringFunc="(x) => x.Name"
                        ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false">
                        <ItemTemplate Context="context2">
                            <MudText Typo="Typo.body1">@context2.Name</MudText>
                            <MudText Typo="Typo.body2">@context2.Area.Name</MudText>
                        </ItemTemplate>

                        <ItemSelectedTemplate Context="context2">
                            <MudText Typo="Typo.body1">@context2.Name</MudText>
                        </ItemSelectedTemplate>
                    </MudAutocomplete>
                }


                <MudSelect Label="Skill level" Variant="Variant.Outlined" @bind-Value="SkillLevel"
                           For="@(() => SkillLevel)" Class="mt-4">
                    <MudSelectItem Value="@((SkillLevel?)null)">Unspecified</MudSelectItem>
                    @foreach (SkillLevel skillLevel in Enum.GetValues<SkillLevel>())
                    {
                        <MudSelectItem T="SkillLevel?" Value="@skillLevel">@skillLevel</MudSelectItem>
                    }
                </MudSelect>

                <MudTextField Label="Comment" Lines="5" Variant="Variant.Outlined" Class="mt-4" @bind-Value="Comment"
                              For="@(() => Comment)" />

                <MudText Typo="Typo.h6" Class="mt-4">Experience</MudText>

                @foreach (var experience in experiences)
                {
                    <MudCheckBox @bind-Checked="experience.Checked">@experience.Title at @experience.Company.Name</MudCheckBox>
                }
            </MudContainer>
        </DialogContent>

        <DialogActions>
            <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => Dialog.Cancel()">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text" Color="Color.Primary">
                @if(ConsultantProfileSkillId is null) 
                {
                    <text>Add</text>
                }
                else 
                {
                    <text>Update</text>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>

</EditForm>

@code
{
    EditContext context = null!;
    List<ExperienceVM> experiences = new List<ExperienceVM>();

    [CascadingParameter]
    public MudDialogInstance Dialog { get; set; } = null!;

    [Parameter]
    public string ConsultantProfileId { get; set; } = null!;

    [Parameter]
    public string? ConsultantProfileSkillId { get; set; } = null!;

    [Required]
    public SkillDto? Skill { get; set; } = null!;

    public SkillLevel? SkillLevel { get; set; }

    public string? Comment { get; set; }

    protected override async Task OnInitializedAsync()
    {
        context = new EditContext(this);

        if (ConsultantProfileSkillId is null) 
        {
            var experiences2 = (await ConsultantsClient.GetExperiencesAsync(ConsultantProfileId, 1, 120, null, null, null)).Items;

            foreach (var experience in experiences2)
            {
                experiences.Add(new ExperienceVM
                {
                    Id = experience.Id,
                    Company = experience.Company,
                    Title = experience.Title,
                    Checked = false
                });
            }
        }
        else 
        {
            var skill = await ConsultantsClient.GetSkillAsync(ConsultantProfileId, ConsultantProfileSkillId);
            Skill = skill.Skill;
            SkillLevel = skill.Level;
            Comment = skill.Comment;
            var selectedExperiences = skill.Experiences;

            var experiences2 = (await ConsultantsClient.GetExperiencesAsync(ConsultantProfileId, 1, 120, null, null, null)).Items;

            foreach (var experience in experiences2)
            {
                var v = selectedExperiences.Any(x => x.Id == experience.Id);

                experiences.Add(new ExperienceVM
                {
                    Id = experience.Id,
                    Company = experience.Company,
                    Title = experience.Title,
                    OriginalChecked = v,
                    Checked = v
                });
            }
        }
    }

    public async Task OnValidSubmit()
    {
        ConsultantProfileSkillDto? consultantProfileSkill = null;

        if(ConsultantProfileSkillId is null) 
        {
            consultantProfileSkill = await ConsultantsClient.AddSkillAsync(ConsultantProfileId, new AddConsultantProfileSkillDto
            {
                SkillId = Skill.Id,
                Level = SkillLevel.GetValueOrDefault(),
                Comment = Comment
            });

            var dtos = experiences
                .Select(x => new UpdateSkillExperienceDto()
                {
                    ConsultantProfileExperienceId = x.Id,
                    Checked = x.Checked
                });

            if(dtos.Any()) 
            {
                await ConsultantsClient.UpdateSkillExperiencesAsync(ConsultantProfileId, consultantProfileSkill.Id, dtos);
            }
        }
        else 
        {
            if (context.IsModified())
            {
                consultantProfileSkill = await ConsultantsClient.UpdateSkillAsync(ConsultantProfileId, ConsultantProfileSkillId, new UpdateConsultantProfileSkillDto
                {
                    Level = SkillLevel.GetValueOrDefault(),
                    Comment = Comment
                });
            }

            var dtos = experiences
                .Where(x => x.Checked != x.OriginalChecked)
                .Select(x => new UpdateSkillExperienceDto()
                {
                    ConsultantProfileExperienceId = x.Id,
                    Checked = x.Checked
                });

            if(dtos.Any()) 
            {
                await ConsultantsClient.UpdateSkillExperiencesAsync(ConsultantProfileId, ConsultantProfileSkillId, dtos);
            }
        }

        Dialog.Close(DialogResult.Ok(consultantProfileSkill));
    }

    public class ExperienceVM
    {
        public string Id { get; set; }

        public CompanyDto Company { get; set; }

        public string Title { get; set; }

        public bool OriginalChecked { get; set; }

        public bool Checked { get; set; }
    }

    async Task<IEnumerable<SkillDto>> SearchSkills(string text)
    {
        try
        {
            var results = await SkillsClient.GetSkillsAsync(1, 10, text, null, null, default);
            return results.Items;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null;
    }

}