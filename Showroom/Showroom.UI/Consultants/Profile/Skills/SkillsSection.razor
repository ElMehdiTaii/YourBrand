@inject IConsultantsClient ConsultantsClient
@inject ISkillsClient SkillsClient
@inject ISnackbar Snackbar
@inject IDialogService DialogService 

<MudCard Elevation="25">
    <MudCardContent>
        <div class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.h5">
                Skills
            </MudText>

            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="ToggleEdit" />
        </div>

        @if (IsEditing)
        {
            <div class="d-flex flex-grow-1 gap-4 mb-4">

                <MudIconButton Icon="@Icons.Filled.Add" OnClick="AddSkillClicked" />

            </div>
        }

        @foreach (var skillGroup in SkillAreas)
        {
            <section class="mb-4">
                <MudText Typo="Typo.h6">
                    @skillGroup.Name
                </MudText>

                <MudChipSet Class="mt-2">
                    @foreach (var skill in skillGroup.Skills)
                    {
                        @if (IsEditing)
                        {
                            <MudChip OnClose="async () => await RemoveSkill(skillGroup, skill)">@skill.Skill.Name</MudChip>
                        }
                        else
                        {
                            <MudTooltip>
                                <ChildContent>
                                    <MudChip Size="Size.Medium" OnClick="async () => await OnSkillClicked(skill)">@skill.Skill.Name</MudChip>
                                </ChildContent>
                                <TooltipContent>
                                    <MudText Typo="Typo.h6">@skill.Skill.Name</MudText>
                                </TooltipContent>
                            </MudTooltip>
                        }
                    }
                </MudChipSet>
            </section>
        }

    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public string ConsultantProfileId { get; set; } = null!;

    [Parameter]
    public bool IsEditing { get; set; }

    [Parameter]
    public EventCallback OnUpdated { get; set; }

    public SkillDto Skill { get; set; }

    public List<SkillArea> SkillAreas  { get; set; } = new List<SkillArea>();

    protected override async Task OnInitializedAsync()
    {
        await LoadSkills();
    }

    async Task LoadSkills() 
    {
        var skills = await ConsultantsClient.GetSkillsAsync(ConsultantProfileId, 1, 150, null, null, null);

        foreach(var skill in skills.Items)
        {
            var skillGroup = SkillAreas.FirstOrDefault(x => x.Id == skill.Skill.Area.Id);
            if(skillGroup is null)
            {
                skillGroup = new SkillArea() {
                    Id = skill.Skill.Area.Id,
                    Name = skill.Skill.Area.Name
                };

                SkillAreas.Add(skillGroup);

                SkillAreas = SkillAreas.OrderBy(x => x.Name).ToList();
            }

            skillGroup.Skills.Add(skill);
        }
    }

    async Task AddSkill(ConsultantProfileSkillDto consultantProfileSkill)
    {
        var skillGroup = SkillAreas.FirstOrDefault(x => x.Id == consultantProfileSkill.Skill.Area.Id);
        if(skillGroup is null)
        {
            skillGroup = new SkillArea() {
                Id = consultantProfileSkill.Skill.Area.Id,
                Name = consultantProfileSkill.Skill.Area.Name
            };

            SkillAreas.Add(skillGroup);

            SkillAreas = SkillAreas.OrderBy(x => x.Name).ToList();
        }

        var skill = skillGroup.Skills.FirstOrDefault(x => x.Skill.Id == consultantProfileSkill.Skill.Id);

        if(skill is not null)
        {
            Snackbar.Add($"The skill \"{skill.Skill.Name}\" has already been added.", Severity.Error);

            Skill = null;
            return;
        }

        skillGroup.Skills.Add(consultantProfileSkill);

        Skill = null;
    }

    async Task RemoveSkill(SkillArea skillGroup, ConsultantProfileSkillDto skill)
    {
        await ConsultantsClient.RemoveSkillAsync(ConsultantProfileId, skill.Skill.Id);

        skillGroup.Skills.Remove(skill);

        if (!skillGroup.Skills.Any())
        {
            SkillAreas.Remove(skillGroup);
        }
    }

    void ToggleEdit() => IsEditing = !IsEditing;

    public class SkillArea
    {
        public string Id { get; set; } = null!;

        public string Name { get; set; } = null!;

        public List<ConsultantProfileSkillDto> Skills  { get; set; } = new List<ConsultantProfileSkillDto>();
    }

    async Task OnSkillClicked(ConsultantProfileSkillDto dto)
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(SkillDialog.ConsultantProfileId), ConsultantProfileId);
            parameters.Add(nameof(SkillDialog.ConsultantProfileSkillId), dto.Id);

            var dialogReference = DialogService.Show<SkillDialog>($"Update {dto.Skill.Name}", parameters, new DialogOptions {
                //FullScreen = true,
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    async Task AddSkillClicked()
    {
        try
        {
            var parameters = new DialogParameters();
            parameters.Add(nameof(SkillDialog.ConsultantProfileId), ConsultantProfileId);

            var dialogReference = DialogService.Show<SkillDialog>("Add new skill", parameters, new DialogOptions {
                //FullScreen = true
                MaxWidth = MaxWidth.ExtraLarge
            });
            var result = await dialogReference.Result;

            if(result.Cancelled)
                return;

            await AddSkill((ConsultantProfileSkillDto)result.Data);

            await OnUpdated.InvokeAsync();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
