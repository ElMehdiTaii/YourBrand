@using System.Linq.Expressions
@inject IPersonProfilesClient PersonProfilesClient

<MudAutocomplete T="PersonProfileDto" Label="@Label" Dense="true" Variant="Variant" Style="@Style" Class="@Class" Value="Value" ValueChanged="ValueChanged"
    For="For" SearchFunc="SearchPersonProfiles" ToStringFunc="x => x.FirstName + ' ' + x.LastName"
    ResetValueOnEmptyText="true" CoerceText="false" CoerceValue="false">
    <ItemTemplate Context="context2">
        <MudText Typo="Typo.body1">@context2.FirstName @context2.LastName</MudText>
        <MudText Typo="Typo.body2">@context2.Headline â€¢ @context2.CompetenceArea.Name</MudText>
    </ItemTemplate>

    <ItemSelectedTemplate Context="context2">
        <MudText Typo="Typo.body1">@context2.FirstName @context2.LastName</MudText>
    </ItemSelectedTemplate>
</MudAutocomplete>

@code {
    [Parameter]
    public string Label { get; set; } = "Profiles";

    [Parameter]
    public PersonProfileDto Value { get; set; }

    [Parameter]
    public EventCallback<PersonProfileDto> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<PersonProfileDto>> For { get; set; }

    [Parameter]
    public string Style { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public Variant Variant { get; set; }

    [Parameter]
    public string? OrganizationId { get; set; }

    [Parameter]
    public string? CompetenceAreaId { get; set; }

    [Parameter]
    public DateTime? AvailableFrom { get; set; }

    async Task<IEnumerable<PersonProfileDto>> SearchPersonProfiles(string text)
    {
        try
        {
            var results = await PersonProfilesClient.GetPersonProfilesAsync(1, 10, OrganizationId, CompetenceAreaId, AvailableFrom, text, null, null);
            return results.Items;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null;
    }
}