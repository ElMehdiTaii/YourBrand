@page "/consultants/{Id}"
@attribute [Authorize]
@using Humanizer
@using Skynet.Showroom.Consultants.Profile.Experiences
@using Skynet.Showroom.Consultants.Profile.Skills
@inject IConsultantsClient ConsultantsClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

@if (consultant != null)
{
    <div class="d-flex justify-center mb-4">
        <img src="@(consultant.ProfileImage ?? "/placeholder.jpeg")" alt="Profile picuture" style="height: 220px; width: 220px; margin-left: auto; margin-right: auto; background-color: lightgray; object-fit: cover;" class="rounded-circle" />
    </div>
    <div class="d-flex justify-center">
        <MudText Typo="Typo.h3" Class="mb-4">
            @if (@consultant.DisplayName != null)
            {@consultant.DisplayName }
        else
        { <text>@consultant.FirstName @consultant.LastName</text>}
        </MudText>
    </div>
    <div class="d-flex justify-center mb-4">
        @if (!string.IsNullOrEmpty(consultant.Headline))
        {
            <MudText Typo="Typo.h6" Class="mb-4" Style="text-align: center; color: #9E9E9E;">@consultant.Headline</MudText>
        }
        else
        {
            <MudText Typo="Typo.h6" Class="mb-4" Style="text-align: center; color: gray;">Add a headline</MudText>
        }
        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" />
    </div>

    <MudGrid Spacing="3">
        @if (!string.IsNullOrEmpty(consultant.ProfileVideo))
        {
            <MudItem xs="12" sm="12" md="6">

                <MudCard Class="mb-8">
                    <MudCardContent>

                        <video style="width: 100%" controls>
                            <source src="@consultant.ProfileVideo" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>

                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary">Contact @consultant.FirstName</MudButton>
                    </MudCardActions>
                </MudCard>

            </MudItem>
        }

        <MudItem xs="12" sm="12" md="8">
            <AboutSection ConsultantProfile="consultant" />
        </MudItem>

        <MudItem xs="12" sm="12" md="4">
            <MudCard>
                <MudCardContent>
                    <div class="d-flex justify-space-between align-center">
                        <MudText Typo="Typo.h5" Class="mb-4">
                            Information
                        </MudText>

                        <MudIconButton Icon="@Icons.Material.Filled.Edit" />
                    </div>

                    <dl class="dl-horizontal">
                        <dt>Region</dt>
                        <dd>@consultant.Organization.Name</dd>
                        <dt>Competence Area</dt>
                        <dd>@consultant.CompetenceArea.Name</dd>
                        @if (consultant.AvailableFromDate != null)
                        {
                            <dt>Available</dt>
                            <dd>
                                @if (consultant.AvailableFromDate?.DateTime.Date > DateTime.Now.Date)
                                {
                                    <span>@consultant.AvailableFromDate?.DateTime.Date.ToString("yyyy/MM/dd")</span>
                                }
                                else
                                {
                                    <span>Immediately</span>
                                }
                            </dd>
                        }
                        @if (!string.IsNullOrEmpty(consultant.PhoneNumber))
                        {
                            <dt>Phone</dt>
                            <dd><a href="tel:@consultant.PhoneNumber">@consultant.PhoneNumber</a></dd>
                        }
                        @if (!string.IsNullOrEmpty(consultant.Email))
                        {
                            <dt>Email</dt>
                            <dd><MudLink Href="@("mailto:" + consultant.Email)">@consultant.Email</MudLink></dd>
                        }
                    </dl>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" sm="12" md="12">
            <ExperienceSection ConsultantProfileId="@Id" />
        </MudItem>

        <MudItem xs="12" sm="12" md="12">
            <SkillsSection />
        </MudItem>
    </MudGrid>
}

@code {
    private ConsultantProfileDto? consultant;
    private Task? task;

    [Parameter]
    public string Id { get; set; } = null!;

    protected override void OnInitialized()
    {
        task = OnInitialize();
    }

    private async Task OnInitialize()
    {
        try
        {
            consultant = await ConsultantsClient.GetConsultantAsync(Id);
        }
        /*catch (ApiException exc)
        {
        }
        catch (HttpRequestException exc)
        {
        }*/
        catch (Exception exc)
        {
            //await JSHelpers.Alert(exc.Message);
        }

        StateHasChanged();
    }

    private async Task AddOrEditExperience(ExperienceDto? experience)
    {
        var dialogReference = DialogService.Show<ExperienceDialog>("New experience");
        var result = await dialogReference.Result;
        /*
        var model = (ExperienceDialog)result.Data;
        if (result.Cancelled)
            return;
        try
        {
            imageToUpload = model.Stream;
            await ItemsClient.AddItemAsync(new AddItemDto()
            { Name = model.Name, Description = model.Description });
        }
        catch (Exception exc)
        {
            Snackbar.Add(exc.Message.ToString(), Severity.Error);
        }
        */
    }

    async Task RemoveExperience(ExperienceDto experience)
    {
        /*
        try
        {
            var result = await DialogService.ShowMessageBox($"Delete '{item.Name}'?", "Are you sure?", "Yes", "No");
            if (result.GetValueOrDefault())
            {
                await ItemsClient.DeleteItemAsync(item.Id);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        */
    }
}
