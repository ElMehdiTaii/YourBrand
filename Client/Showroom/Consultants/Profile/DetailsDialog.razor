@using System.ComponentModel.DataAnnotations
@inject IConsultantsClient ConsultantsClient
@inject ISnackbar Snackbar
@inject ICompetenceAreasClient CompetenceAreasClient
@inject IOrganizationsClient OrganizationsClient
@inject ICompetenceAreasClient CompetenceAreasClient

<div style="width: 350px; max-width: 350px;">
    <EditForm Model="@this" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudDialog>
            <DialogContent>
                <MudTextField Label="First Name" Variant="Variant.Outlined" @bind-Value="FirstName"
                              For="@(() => FirstName)" />
                <MudTextField Label="Last Name" Class="mb-2" Variant="Variant.Outlined" @bind-Value="LastName"
                              For="@(() => LastName)" />
                <MudTextField Label="Display Name" HelperText="Optional" Class="mb-2" Variant="Variant.Outlined" @bind-Value="DisplayName"
                              For="@(() => DisplayName)" />
                <MudDatePicker Label="Birth Date" HelperText="Optional" Class="mb-2" Variant="Variant.Outlined" @bind-Date="BirthDate"
                              For="@(() => BirthDate)" />

                @*
        <MudAutocomplete T="OrganizationDto" Label="Organization" Class="mb-2"
                         Variant="Variant.Outlined" ResetValueOnEmptyText="true" @bind-Value="Organization" For="() => Organization"
                         SearchFunc="SearchOrganizations" ToStringFunc="(x) => x.Name">
            <ItemTemplate Context="context2">
                <MudText Typo="Typo.body1">@context2.Name</MudText>
            </ItemTemplate>

            <ItemSelectedTemplate Context="context2">
                <MudText Typo="Typo.body1">@context2.Name</MudText>
            </ItemSelectedTemplate>
        </MudAutocomplete>
        <MudAutocomplete T="CompetenceAreaDto" Label="Competence Area" Class="mb-2"
                         Variant="Variant.Outlined" ResetValueOnEmptyText="true" @bind-Value="CompetenceArea" For="() => CompetenceArea"
                         SearchFunc="SearchCompetenceAreas" ToStringFunc="(x) => x.Name">
            <ItemTemplate Context="context2">
                <MudText Typo="Typo.body1">@context2.Name</MudText>
            </ItemTemplate>

            <ItemSelectedTemplate Context="context2">
                <MudText Typo="Typo.body1">@context2.Name</MudText>
            </ItemSelectedTemplate>
        </MudAutocomplete>
                *@
            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => Dialog.Cancel()">
                    Cancel
                </MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text" Color="Color.Primary">
                    Update
                </MudButton>
            </DialogActions>
        </MudDialog>

    </EditForm>
</div>

@code
{
    [CascadingParameter]
    public MudDialogInstance Dialog { get; set; } = null!;

    [Parameter]
    public ConsultantProfileDto? ConsultantProfile { get; set; }

    [Required]
    public string FirstName { get; set; } = null!;

    [Required]
    public string LastName { get; set; } = null!;

    public string? DisplayName { get; set; } = null!;

    public DateTime? BirthDate { get; set; } = null!;

    public OrganizationDto? Organization { get; set; } = null!;

    public CompetenceAreaDto? CompetenceArea { get; set; } = null!;

    protected override void OnInitialized()
    {
        if (ConsultantProfile is not null)
        {
            FirstName = ConsultantProfile.FirstName;
            LastName = ConsultantProfile.LastName;
            DisplayName = ConsultantProfile.DisplayName;
            BirthDate = ConsultantProfile.BirthDate?.Date;
            Organization = ConsultantProfile.Organization;
            CompetenceArea = ConsultantProfile.CompetenceArea;
        }
    }

    public async Task OnValidSubmit()
    {
        try
        {
            await ConsultantsClient.UpdateDetailsAsync(ConsultantProfile.Id, new ConsultantProfileDetailsDto
            {
                FirstName = FirstName,
                LastName = LastName,
                DisplayName = DisplayName,
                BirthDate = BirthDate
            });

            ConsultantProfile.FirstName = FirstName;
            ConsultantProfile.LastName = LastName;
            ConsultantProfile.DisplayName = DisplayName;
            ConsultantProfile.BirthDate = BirthDate;

            Dialog.Close(DialogResult.Ok(true));
        }
        catch (Exception exc)
        {
            Snackbar.Add("Failed to update details.", Severity.Error);
        }
    }

    async Task<IEnumerable<OrganizationDto>> SearchOrganizations(string text)
    {
        try
        {
            var results = await OrganizationsClient.GetOrganizationsAsync(1, 10, text, null, null, default);
            return results.Items;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null;
    }

    async Task<IEnumerable<CompetenceAreaDto>> SearchCompetenceAreas(string text)
    {
        try
        {
            var results = await CompetenceAreasClient.GetCompetenceAreasAsync(1, 10, text, null, null, default);
            return results.Items;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null;
    }
}