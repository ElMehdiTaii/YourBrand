@using Humanizer
@using Experiences
@inject IConsultantsClient ConsultantsClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudCard>
    <MudCardContent>
        <div class="d-flex justify-space-between align-center">
            <MudText Typo="Typo.h5" Class="mb-4">
                Experience
            </MudText>

            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="async () => await AddOrEditExperience(null)" />
        </div>

        @foreach (var experience in experiences)
        {
            <div class="d-flex justify-space-between align-center">
                <MudText Typo="Typo.h6" Class="mb-4">
                    @experience.Title
                </MudText>

                <div>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="async () => await AddOrEditExperience(experience)" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" />
                </div>
            </div>

            <MudText Typo="Typo.body2">@experience.CompanyName · Contract</MudText>
            <MudText Typo="Typo.body2">@experience.StartDate.ToString("MMMM yyyy") - @(experience.EndDate?.ToString("MMMM yyyy") ?? "Now") · @(((experience.EndDate ?? DateTime.Now.Date) - experience.StartDate).Humanize(minUnit: Humanizer.Localisation.TimeUnit.Month, maxUnit: Humanizer.Localisation.TimeUnit.Year, precision: 2))</MudText>

            <MudText Class="mt-4 mb-4">@experience.Description</MudText>
        }

        @if (experiences.Count() < total)
        {
            <div Class="d-flex justify-center flex-grow-1 mt-8">
                <MudButton Variant="Variant.Filled" OnClick="LoadMore">Ladda fler (@(total - experiences.Count()) återstår)</MudButton>
            </div>
        }
    </MudCardContent>
</MudCard>

@code {
    private List<ExperienceDto>? experiences = new List<ExperienceDto>();

    int page = 1;
    int total = 0;

    [Parameter]
    public string ConsultantProfileId { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            page = 1;

            var experiencesResult = await ConsultantsClient.GetExperiencesAsync(ConsultantProfileId, page++, 3, null, null, null);
            experiences = experiencesResult.Items.ToList();
            total = experiencesResult.TotalCount;
        }
        /*catch (ApiException exc)
        {
        }
        catch (HttpRequestException exc)
        {
        }*/
        catch (Exception exc)
        {
            //await JSHelpers.Alert(exc.Message);
        }
    }

    private async Task LoadMore()
    {
        if (total == experiences.Count())
        {
            return;
        }

        var experiencesResult = await ConsultantsClient.GetExperiencesAsync(ConsultantProfileId, page++, 3, null, null, null);
        experiences.AddRange(experiencesResult.Items);

        StateHasChanged();
    }

    private async Task AddOrEditExperience(ExperienceDto? experience)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(ExperienceDialog.ConsultantProfileId), ConsultantProfileId);
        parameters.Add(nameof(ExperienceDialog.Experience), experience);

        var dialogReference = DialogService.Show<ExperienceDialog>(experience is null ? "New experience" : "Update experience", parameters);
        var result = await dialogReference.Result;

        if (result.Cancelled)
            return;

        page = 1;

        var experiencesResult = await ConsultantsClient.GetExperiencesAsync(ConsultantProfileId, page++, 3, null, null, null);
        experiences = experiencesResult.Items.ToList();
        total = experiencesResult.TotalCount;
    }

    async Task RemoveExperience(ExperienceDto experience)
    {
        /*
        try
        {
            var result = await DialogService.ShowMessageBox($"Delete '{item.Name}'?", "Are you sure?", "Yes", "No");
            if (result.GetValueOrDefault())
            {
                await ItemsClient.DeleteItemAsync(item.Id);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        */
    }
}