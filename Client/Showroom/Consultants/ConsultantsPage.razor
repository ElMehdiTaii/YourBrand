@page "/consultants"
@attribute [Authorize]
@using YourCompany.Showroom.Consultants.Profile
@inject IConsultantsClient ConsultantProfilesClient
@inject IOrganizationsClient OrganizationsClient
@inject ICompetenceAreasClient CompetenceAreasClient
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h3" Class="mb-4">Consultants</MudText>

<MudButton Link="/gallery" Variant="Variant.Filled" Color="Color.Default" Class="mb-2 me-2">Gallery</MudButton>

<MudButton Link="/consultants/create" Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Default" Class="mb-2">
    New consultant
</MudButton>

<MudPaper Class="pa-4">
    <MudTable @ref="table" T="ConsultantProfileDto" Elevation="0" ServerData="LoadData" Dense="false" Hover="true" Bordered="false"
              Striped="true" OnRowClick="ItemOnClick">
        <ToolBarContent>
            <MudAutocomplete T="OrganizationDto" Label="Organization" Dense="true" Variant="Variant.Text" ResetValueOnEmptyText="true" Value="Organization" ValueChanged="(o) => OnOrganizationChanged(o)" For="() => Organization" SearchFunc="SearchOrganizations" ToStringFunc="(x) => x.Name">
                <ItemTemplate Context="context2">
                    <MudText Typo="Typo.body1">@context2.Name</MudText>
                </ItemTemplate>

                <ItemSelectedTemplate Context="context2">
                    <MudText Typo="Typo.body1">@context2.Name</MudText>
                </ItemSelectedTemplate>
            </MudAutocomplete>

            <MudSpacer />

            <MudAutocomplete T="CompetenceAreaDto" Label="Competence Area" Dense="true" Variant="Variant.Text" ResetValueOnEmptyText="true" Value="CompetenceArea" ValueChanged="(ca) => OnCompetenceAreaChanged(ca)" For="() => CompetenceArea" SearchFunc="SearchCompetenceAreas" ToStringFunc="(x) => x.Name">
                <ItemTemplate Context="context2">
                    <MudText Typo="Typo.body1">@context2.Name</MudText>
                </ItemTemplate>

                <ItemSelectedTemplate Context="context2">
                    <MudText Typo="Typo.body1">@context2.Name</MudText>
                </ItemSelectedTemplate>
            </MudAutocomplete>

            <MudSpacer />

            <MudTextField T="string" Dense="true" Value="searchString" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate="true" DebounceInterval="200"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh></MudTh>
            <MudTh><MudTableSortLabel T="ConsultantProfileDto" SortLabel="FirstName">First Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="ConsultantProfileDto" SortLabel="LastName">Last Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="ConsultantProfileDto" SortLabel="DisplayName">Display Name</MudTableSortLabel></MudTh>
            @*<MudTh><MudTableSortLabel T="ConsultantProfileDto" SortLabel="Headline">Headline</MudTableSortLabel></MudTh>*@
            <MudTh><MudTableSortLabel T="ConsultantProfileDto" SortLabel="CompetenceArea">Competence Area</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="ConsultantProfileDto" SortLabel="Organization">Organization</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <ProfileImage ConsultantProfile="context" Height="50" Width="50" />
            </MudTd>
            <MudTd DataLabel="First Name">@context.FirstName</MudTd>
            <MudTd DataLabel="Last Name">@context.LastName</MudTd>
            <MudTd DataLabel="Display Name">@context.DisplayName</MudTd>
            @*<MudTd DataLabel="Headline">@context.Headline</MudTd>*@
            <MudTd DataLabel="Competence Area">@context.CompetenceArea?.Name</MudTd>
            <MudTd DataLabel="Organization">@context.Organization?.Name</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudPaper>


@code {
    MudTable<ConsultantProfileDto> table; 
    string? searchString;

    public OrganizationDto? Organization { get; set; }
    public CompetenceAreaDto? CompetenceArea { get; set; }

    private async Task<TableData<ConsultantProfileDto>> LoadData(TableState state)
    {
        try
        {
            var results = await ConsultantProfilesClient.GetConsultantsAsync(state.Page + 1, state.PageSize, Organization?.Id, CompetenceArea?.Id, null, searchString, state.SortLabel, state.SortDirection == MudBlazor.SortDirection.Ascending ? YourCompany.Showroom.Client.SortDirection.Asc : YourCompany.Showroom.Client.SortDirection.Desc);
            return new TableData<ConsultantProfileDto> { Items = results.Items, TotalItems = results.TotalCount };
        }
        /*catch (ApiException exc)
        {
        }
        catch (HttpRequestException exc)
        {
        }*/
        catch (Exception exc)
        {
            //await JSHelpers.Alert(exc.Message);
        }

        return null!;
    }

    private async Task ItemOnClick(TableRowClickEventArgs<ConsultantProfileDto> ev)
    {
        var item = ev.Item;

        NavigationManager.NavigateTo($"/Consultants/{item.Id}");
    }

    async Task<IEnumerable<OrganizationDto>> SearchOrganizations(string text)
    {
        try
        {
            var results = await OrganizationsClient.GetOrganizationsAsync(1, 10, text, null, null, default);
            return results.Items;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null;
    }

    async Task<IEnumerable<CompetenceAreaDto>> SearchCompetenceAreas(string text)
    {
        try
        {
            var results = await CompetenceAreasClient.GetCompetenceAreasAsync(1, 10, text, null, null, default);
            return results.Items;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        return null;
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task OnOrganizationChanged(OrganizationDto o)
    {
        Organization = o;
        table.ReloadServerData();
    }

    private async Task OnCompetenceAreaChanged(CompetenceAreaDto ca)
    {
        CompetenceArea = ca;
        table.ReloadServerData();
    }
}