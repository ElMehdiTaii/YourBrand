@inject IUsersClient UsersClient
@inject NavigationManager NavigationManager

<MudTable T="ProjectMembershipDto" ServerData="@(new Func<TableState, Task<TableData<ProjectMembershipDto>>>(ServerReload2))"
            Hover="true" @ref="table2" Class="mt-4" OnRowClick="(e) => GotToProject(e.Item)">
    <HeaderContent>
        <MudTh><MudTableSortLabel T="ProjectMembershipDto" SortLabel="Project.Name">Project</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="ProjectMembershipDto" SortLabel="Project.Description">Description</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate Context="membership">
        <MudTd DataLabel="Name">@membership.Project.Name</MudTd>
        <MudTd DataLabel="Name">@membership.Project.Description</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    MudTable<ProjectMembershipDto> table2 = null!;
    
    [Parameter]
    [EditorRequired]
    public string UserId { get; set; } = null!;

    private async Task<TableData<ProjectMembershipDto>> ServerReload2(TableState state)
    {
        var result = await UsersClient.GetProjectMembershipsAsync(UserId, state.Page, state.PageSize,
            state.SortLabel, state.SortDirection == MudBlazor.SortDirection.None ? null : state.SortDirection == MudBlazor.SortDirection.Descending ? TimeReport.Client.SortDirection.Desc : TimeReport.Client.SortDirection.Asc);

        return new TableData<ProjectMembershipDto>() { TotalItems = result.TotalItems, Items = result.Items };
    }

    private void GotToProject(ProjectMembershipDto membership)
    {
        NavigationManager.NavigateTo($"/projects/{membership.Project.Id}");
    }
}