@page "/Orders/Create"
@page "/Orders/{orderNo:int}"
@using YourBrand.Catalog.Client
@inject IOrdersClient OrdersClient
@inject IOrderStatusesClient OrderStatusesClient
@inject IProductsClient ProductsClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@if (order != null)
{
    <PageTitle>Order @order.OrderNo</PageTitle>

    <MudText Typo="Typo.h3" GutterBottom="true">Order @order.OrderNo</MudText>

    <MudGrid Class="mb-8">
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="25">
                <MudCardContent>
                    <MudSelect T="OrderStatusDto" Class="mb-8" Label="Status" Value="orderStatus" ValueChanged="s => UpdateOrderStatus(s)" ToStringFunc="(ci) => ci.Name">
                        @foreach (var status in (orderStatuses ?? Array.Empty<OrderStatusDto>()))
                        {
                            <MudSelectItem Value="@status" />
                        }
                    </MudSelect>

                    <MudDatePicker Label="Date" Date="@order.Date.Date" Class="mb-8" />

                    @{
                        var customerNo = order?.Embedded?.CustomFields?.FirstOrDefault(cf => cf.Name == "customerNo");
                    }

                    @if (customerNo != null)
                    {
                        <MudField Label="Customer No" Class="mb-8">@customerNo.Value</MudField>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="25">
                <MudCardContent>
                    <MudField Label="Sub Total" Class="mb-8">@order.SubTotal?.ToString("c")</MudField>

                    <MudField Label="VAT" Class="mb-8">@order.Vat?.ToString("c")</MudField>

                    <MudField Label="Charge" Class="mb-8">@order.Charge?.ToString("c")</MudField>

                    <MudField Label="Discount" Class="mb-8">@order.Discount?.ToString("c")</MudField>

                    <MudField Label="Rounding" Class="mb-8">@order.Rounding?.ToString("c")</MudField>

                    <MudField Label="Total" Class="mb-8">@order.Total.ToString("c")</MudField>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="6">
            <MudCard Elevation="25">
                <MudCardContent>
                    <MudTable Items="@Totals" Context="total" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                        <HeaderContent>
                            <MudTh>VAT%</MudTh>
                            <MudTh>Sub Total</MudTh>
                            <MudTh>VAT</MudTh>
                            <MudTh>Total</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="VAT%">@total.VatRate%</MudTd>
                            <MudTd DataLabel="Sub Total">@total.SubTotal.ToString("c")</MudTd>
                            <MudTd DataLabel="VAT">@total.Vat.ToString("c")</MudTd>
                            <MudTd DataLabel="Total">@total.Total.ToString("c")</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <MudTable T="OrderItemVM" @ref="table" Class="mb-8" Elevation="25"
              Items="@Items" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@loading" LoadingProgressColor="Color.Info" @bind-SelectedItem="selectedItem" S
              CanCancelEdit="true" SortLabel="Sort" CommitEditTooltip="Commit Edit" OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" RowEditCommit="ItemHasBeenCommitted">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Items</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Item</MudTh>
            <MudTh>Price</MudTh>
            @* <MudTh>VAT %</MudTh> *@
            <MudTh>Quantity</MudTh>
            <MudTh Style="text-align:right">Total</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate Context="orderItem">
            <MudTd DataLabel="Item">@orderItem.Item?.Name</MudTd>
            <MudTd DataLabel="Price">@orderItem.Item?.Price?.ToString("c")</MudTd>
            @* <MudTd DataLabel="VAT Rate">@(orderItem.Item?.VatRate * 100)%</MudTd> *@
            <MudTd DataLabel="Quantity">@orderItem.Quantity</MudTd>
            <MudTd DataLabel="Total" Style="text-align:right">@((orderItem.Item?.Price * orderItem.Quantity)?.ToString("c"))</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Star" aria-label="delete" OnClick="() => {}"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="() => RemoveItem(orderItem)"></MudIconButton>
            </MudTd>
        </RowTemplate>

        <ChildRowContent Context="orderItem">
            @if (orderItem.Charges.Any())
            {
                <MudTr>
                    <td colspan="8">
                        <MudCard Elevation="0">
                            @* <MudCardHeader>
                                    <CardHeaderContent>
                                    <MudText Typo="Typo.body1"><strong>Discounts</strong></MudText>
                                    </CardHeaderContent>
                                </MudCardHeader> *@
                            <MudCardContent Class="pa-0">
                                <MudTable Items="@orderItem.Charges" Context="charge" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                    @* <HeaderContent>
                                            <MudTh colspan="6" Style="padding-left: 35px;">Description</MudTh>
                                            <MudTh Style="text-align:right">Total</MudTh>
                                            <MudTd />
                                        </HeaderContent> *@
                                    <RowTemplate>
                                        <MudTd colspan="6" DataLabel="Description" Style="padding-left: 35px;">@charge.Description</MudTd>
                                        <MudTd DataLabel="Total" Style="text-align:right">+@charge.Total.ToString("c")</MudTd>
                                        <MudTd>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="() => {}"></MudIconButton>
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
            }
            @if (orderItem.Discounts.Any())
            {
                <MudTr>
                    <td colspan="8">
                        <MudCard Elevation="0">
                            @* <MudCardHeader>
                                    <CardHeaderContent>
                                    <MudText Typo="Typo.body1"><strong>Discounts</strong></MudText>
                                    </CardHeaderContent>
                                </MudCardHeader> *@
                            <MudCardContent Class="pa-0">
                                <MudTable Items="@orderItem.Discounts" Context="discount" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                    @* <HeaderContent>
                                            <MudTh colspan="6" Style="padding-left: 35px;">Description</MudTh>
                                            <MudTh Style="text-align:right">Total</MudTh>
                                            <MudTd />
                                        </HeaderContent> *@
                                    <RowTemplate>
                                        <MudTd colspan="6" DataLabel="Description" Style="padding-left: 35px;">@discount.Description</MudTd>
                                        <MudTd DataLabel="Total" Style="text-align:right">@discount.Total.ToString("c")</MudTd>
                                        <MudTd>
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="() => {}"></MudIconButton>
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
            }
        </ChildRowContent>
        <RowEditingTemplate Context="orderItem">
            <MudTd DataLabel="Item">
                <MudAutocomplete T="ProductDto" Required
                                 @bind-Value="orderItem.Item"
                                 Disabled="@(orderItem.Id != null)"
                                 SearchFunc="@SearchItems"
                                 Margin="Margin.Dense"
                                 ResetValueOnEmptyText="@true"
                                 CoerceText="@true"
                                 ToStringFunc="(ci) => ci.Name"
                                 CoerceValue="false">
                </MudAutocomplete>
            </MudTd>
            <MudTd DataLabel="Price">@orderItem.Item?.Price?.ToString("c")</MudTd>
            @* <MudTd DataLabel="VAT Rate">@(orderItem.Item?.VatRate * 100)%</MudTd> *@
            <MudTd DataLabel="Quantity">
                <MudNumericField T="int"
                                 @bind-Value="orderItem.Quantity"
                                 Min="1"
                                 Margin="Margin.Dense" />
                @* @orderItem.Item?.Unit *@
            </MudTd>
            <MudTd DataLabel="Total" Style="text-align:right">@((orderItem.Item?.Price * orderItem.Quantity)?.ToString("c"))</MudTd>
            <MudTd></MudTd>
        </RowEditingTemplate>
    </MudTable>

    <MudButton OnClick="AddItem" Disabled="@isEditing" StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary">Item</MudButton>

    <MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
        Open Simple Dialog
    </MudButton>
}

@code {
    private bool loading;
    private Order? order;
    private OrderItemVM? backupItem;
    private OrderItemVM? selectedItem;
    bool isEditing = false;

    OrderStatusDto? orderStatus = null;
    IEnumerable<OrderStatusDto>? orderStatuses = null;

    MudTable<OrderItemVM> table = null!;

    [Parameter]
    public int? OrderNo { get; set; }

    public List<OrderTotalVM> Totals = new List<OrderTotalVM>();
    public List<OrderItemVM> Items { get; set; } = new List<OrderItemVM>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            orderStatuses = await OrderStatusesClient.GetStatusesAsync();

            loading = true;

            if (OrderNo != null)
            {
                await LoadOrder(OrderNo.GetValueOrDefault());
            }
            else
            {
                order = new Order();

                orderStatus = orderStatuses.FirstOrDefault(x => x.Id == order.Status);

            }
        }
        finally
        {
            loading = false;
        }
    }

    async Task LoadOrder(int orderNo, bool include = true)
    {
        //include = true;

        order = await OrdersClient.GetOrderByNoAsync(orderNo, include ? new[] { "items", "discounts", "charges", "customFields" } : null);

        LoadTotals();

        await LoadItems();

        orderStatus = orderStatuses?.FirstOrDefault(x => x.Id == order!.Status);
    }

    private void LoadTotals()
    {
        Totals.Clear();

        if (order is null) return;

        if (order.Totals != null && order.Totals.Any())
        {
            foreach (var (key, total) in order.Totals)
            {
                Totals.Add(new OrderTotalVM
                {
                    VatRate = key,
                    Vat = total.Vat,
                    SubTotal = total.SubTotal,
                    Total = total.Total
                });
            }
        }
        else
        {
            Totals.Add(new OrderTotalVM
            {
                VatRate = order.VatRate.GetValueOrDefault().ToString(),
                Vat = order.Vat.GetValueOrDefault(),
                SubTotal = order.SubTotal.GetValueOrDefault(),
                Total = order.Total - order.Rounding.GetValueOrDefault()
            });
        }
    }

    private async Task LoadItems()
    {
        int x = 0;

        if (order?.Embedded?.Items != null)
        {
            foreach (var item in order.Embedded.Items)
            {
                var i = new OrderItemVM()
                {
                    Id = item.Id,
                    Item = await ProductsClient.GetProductAsync(item.ItemId),
                    Quantity = (int)item.Quantity
                };

                Items.Add(i);

                @*
                foreach (var c in i.Item.Embedded.Charges)
                {
                    i.Charges.Add(new ChargeVM()
                    {
                        Id = c.Id,
                        Description = c.Name,
                        Total = c.Amount.GetValueOrDefault()
                    });
                }
                *@

                x++;
            }
        }
    }

    public async Task UpdateOrderStatus(OrderStatusDto dto)
    {
        try
        {
            await OrdersClient.UpdateOrderStatusAsync(OrderNo.GetValueOrDefault(), dto.Id);

            orderStatus = dto;
        }
        catch
        {
            Snackbar.Add("Failed to update order status");
        }
    }

    public void AddItem()
    {
        selectedItem = new OrderItemVM()
        {
            Quantity = 1
        };

        Items.Add(selectedItem);

        //table.SetEditingItem(selectedItem);

        //isEditing = true;

        StateHasChanged();
    }

    public async Task RemoveItem(OrderItemVM dto)
    {
        if (dto.Id != null)
        {
            await OrdersClient.RemoveItemAsync(
                OrderNo.GetValueOrDefault(),
                dto.Id.GetValueOrDefault());
        }
        Items.Remove(dto);

        await LoadOrder(OrderNo.GetValueOrDefault(), false);
    }

    private void BackupItem(object item)
    {
        backupItem = new OrderItemVM()
        {
            Id = ((OrderItemVM)item).Id,
            Item = ((OrderItemVM)item).Item,
            Quantity = ((OrderItemVM)item).Quantity
        };

        isEditing = true;

        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object o)
    {
        var dto = (OrderItemVM)o;

        if (dto.Id == null)
        {
            //order = await OrdersClient.GetOrderItemAsync(OrderNo.GetValueOrDefault());

            var item = await OrdersClient.AddItemAsync(
                 OrderNo.GetValueOrDefault(),
                 dto.Item!.Description,
                 dto.Item!.Id,
                 "pcs", //dto.Item!.Unit,
                 dto.Quantity
                 );

            @*

            foreach (var c in dto.Item.Embedded.Charges)
            {
                await OrdersClient.AddChargeToOrderItemAsync(OrderNo.GetValueOrDefault(), item.Id, new ChargeDetails
                {
                    Amount = c.Amount,
                    Description = c.Name,
                    Percent = c.Percent
                });


                /*
                dto.Charges.Add(new ChargeVM() {
                    Id = c.Id,
                    Description = c.Description,
                    Total = c.Amount.GetValueOrDefault()
                });
                */
            }

                *@

            dto.Id = item.Id;
        }
        else
        {
            await OrdersClient.UpdateItemQuantityAsync(
                OrderNo.GetValueOrDefault(),
                dto.Id.GetValueOrDefault(),
                dto.Quantity);
        }

        isEditing = false;

        await LoadOrder(OrderNo.GetValueOrDefault(), false);

        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object item)
    {
        isEditing = false;

        StateHasChanged();

        if (item == null) return;

        var i = ((OrderItemVM)item!);

        Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(i));

        if (i.Id == null)
        {
            Items.Remove(i);

            StateHasChanged();
            return;
        }

        if (backupItem is null) return;

        i.Id = backupItem.Id;
        i.Item = backupItem.Item;
        i.Quantity = backupItem.Quantity;

    }

    private async Task<IEnumerable<ProductDto>> SearchItems(string value)
    {
        var products = await ProductsClient.GetProductsAsync(false, null, 0, 100, null, null, null);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return products.Items;

        return products.Items.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private Task<IEnumerable<OrderStatusDto>> SearchOrderStatuses(string value)
    {
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return Task.FromResult(orderStatuses!.AsEnumerable()!);

        return Task.FromResult(
            orderStatuses!.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)));
    }

    private void OpenDialog()
    {
        var parameters = new DialogParameters();
        //parameters.Add("Discount", Discount);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogService.Show<AddDiscountDialog>("Simple Dialog", parameters, options);
    }
}